import { n as noop, s as safe_not_equal, a as subscribe, r as run_all, i as is_function, S as SvelteComponent, b as init, c as create_slot, e as empty, d as insert, f as svg_element, t as text, g as append, h as set_data, j as detach, k as assign, l as attr, m as set_svg_attributes, o as listen, u as update_slot, p as get_spread_update, q as transition_in, v as transition_out, w as exclude_internal_props, x as bubble, y as compute_rest_props, z as element, A as set_attributes, B as toggle_class, C as group_outros, D as check_outros, E as getContext, F as binding_callbacks, G as space, H as create_component, I as mount_component, J as destroy_component, K as get_spread_object, L as component_subscribe, M as createEventDispatcher, N as setContext, O as update_keyed_each, P as add_flush_callback, Q as outro_and_destroy_block, R as bind, T as prevent_default, U as onMount, V as afterUpdate } from './common/index-ad827e2b.js';

const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */
function readable(value, start) {
    return {
        subscribe: writable(value, start).subscribe
    };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}
function derived(stores, fn, initial_value) {
    const single = !Array.isArray(stores);
    const stores_array = single
        ? [stores]
        : stores;
    const auto = fn.length < 2;
    return readable(initial_value, (set) => {
        let inited = false;
        const values = [];
        let pending = 0;
        let cleanup = noop;
        const sync = () => {
            if (pending) {
                return;
            }
            cleanup();
            const result = fn(single ? values[0] : values, set);
            if (auto) {
                set(result);
            }
            else {
                cleanup = is_function(result) ? result : noop;
            }
        };
        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
            values[i] = value;
            pending &= ~(1 << i);
            if (inited) {
                sync();
            }
        }, () => {
            pending |= (1 << i);
        }));
        inited = true;
        sync();
        return function stop() {
            run_all(unsubscribers);
            cleanup();
        };
    });
}

/* node_modules/carbon-icons-svelte/lib/ChevronRight16/ChevronRight16.svelte generated by Svelte v3.31.2 */

function create_if_block(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ChevronRight16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M11 8L6 13 5.3 12.3 9.6 8 5.3 3.7 6 3z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ChevronRight16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ChevronRight16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-components-svelte/src/Button/ButtonSkeleton.svelte generated by Svelte v3.31.2 */

function create_else_block(ctx) {
	let div;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler_1*/ ctx[8]),
					listen(div, "mouseover", /*mouseover_handler_1*/ ctx[9]),
					listen(div, "mouseenter", /*mouseenter_handler_1*/ ctx[10]),
					listen(div, "mouseleave", /*mouseleave_handler_1*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (21:0) {#if href}
function create_if_block$1(ctx) {
	let a;
	let t_value = "" + "";
	let t;
	let a_rel_value;
	let mounted;
	let dispose;

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
			? "noopener noreferrer"
			: undefined
		},
		{ role: "button" },
		/*$$restProps*/ ctx[3]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			t = text(t_value);
			set_attributes(a, a_data);
			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[4]),
					listen(a, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(a, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(a, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*href*/ 1 && { href: /*href*/ ctx[0] },
				dirty & /*$$restProps*/ 8 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
				? "noopener noreferrer"
				: undefined) && { rel: a_rel_value },
				{ role: "button" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[0]) return create_if_block$1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","size","small"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { href = undefined } = $$props;
	let { size = "default" } = $$props;
	let { small = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("href" in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("small" in $$new_props) $$invalidate(2, small = $$new_props.small);
	};

	return [
		href,
		size,
		small,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class ButtonSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { href: 0, size: 1, small: 2 });
	}
}

/* node_modules/carbon-components-svelte/src/Button/Button.svelte generated by Svelte v3.31.2 */
const get_default_slot_changes = dirty => ({ props: dirty[0] & /*buttonProps*/ 512 });
const get_default_slot_context = ctx => ({ props: /*buttonProps*/ ctx[9] });

// (145:2) {:else}
function create_else_block$1(ctx) {
	let button;
	let t0;
	let t1;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[2] && create_if_block_4(ctx);
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[4]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [/*buttonProps*/ ctx[9]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (if_block) if_block.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append(button, t0);

			if (default_slot) {
				default_slot.m(button, null);
			}

			append(button, t1);

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			/*button_binding*/ ctx[31](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_2*/ ctx[22]),
					listen(button, "mouseover", /*mouseover_handler_2*/ ctx[23]),
					listen(button, "mouseenter", /*mouseenter_handler_2*/ ctx[24]),
					listen(button, "mouseleave", /*mouseleave_handler_2*/ ctx[25])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(button, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 16) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[4];

			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*button_binding*/ ctx[31](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (124:30) 
function create_if_block_2(ctx) {
	let a;
	let t0;
	let t1;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[2] && create_if_block_3(ctx);
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[4]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let a_levels = [/*buttonProps*/ ctx[9]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (if_block) if_block.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			if (if_block) if_block.m(a, null);
			append(a, t0);

			if (default_slot) {
				default_slot.m(a, null);
			}

			append(a, t1);

			if (switch_instance) {
				mount_component(switch_instance, a, null);
			}

			/*a_binding*/ ctx[30](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler_1*/ ctx[18]),
					listen(a, "mouseover", /*mouseover_handler_1*/ ctx[19]),
					listen(a, "mouseenter", /*mouseenter_handler_1*/ ctx[20]),
					listen(a, "mouseleave", /*mouseleave_handler_1*/ ctx[21])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(a, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 16) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[4];

			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, a, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*a_binding*/ ctx[30](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (122:2) {#if as}
function create_if_block_1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], get_default_slot_context);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope, buttonProps*/ 66048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (110:0) {#if skeleton}
function create_if_block$2(ctx) {
	let buttonskeleton;
	let current;

	const buttonskeleton_spread_levels = [
		{ href: /*href*/ ctx[8] },
		{ size: /*size*/ ctx[1] },
		/*$$restProps*/ ctx[10],
		{
			style: /*hasIconOnly*/ ctx[2] && "width: 3rem;"
		}
	];

	let buttonskeleton_props = {};

	for (let i = 0; i < buttonskeleton_spread_levels.length; i += 1) {
		buttonskeleton_props = assign(buttonskeleton_props, buttonskeleton_spread_levels[i]);
	}

	buttonskeleton = new ButtonSkeleton({ props: buttonskeleton_props });
	buttonskeleton.$on("click", /*click_handler*/ ctx[26]);
	buttonskeleton.$on("mouseover", /*mouseover_handler*/ ctx[27]);
	buttonskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[28]);
	buttonskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[29]);

	return {
		c() {
			create_component(buttonskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(buttonskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const buttonskeleton_changes = (dirty[0] & /*href, size, $$restProps, hasIconOnly*/ 1286)
			? get_spread_update(buttonskeleton_spread_levels, [
					dirty[0] & /*href*/ 256 && { href: /*href*/ ctx[8] },
					dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] },
					dirty[0] & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10]),
					dirty[0] & /*hasIconOnly*/ 4 && {
						style: /*hasIconOnly*/ ctx[2] && "width: 3rem;"
					}
				])
			: {};

			buttonskeleton.$set(buttonskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(buttonskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buttonskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(buttonskeleton, detaching);
		}
	};
}

// (154:6) {#if hasIconOnly}
function create_if_block_4(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[4]);
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 16) set_data(t, /*iconDescription*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (134:6) {#if hasIconOnly}
function create_if_block_3(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[4]);
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 16) set_data(t, /*iconDescription*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$2, create_if_block_1, create_if_block_2, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[6]) return 0;
		if (/*as*/ ctx[5]) return 1;
		if (/*href*/ ctx[8] && !/*disabled*/ ctx[7]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let buttonProps;

	const omit_props_names = [
		"kind","size","hasIconOnly","icon","iconDescription","tooltipAlignment","tooltipPosition","as","skeleton","disabled","href","tabindex","type","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { kind = "primary" } = $$props;
	let { size = "default" } = $$props;
	let { hasIconOnly = false } = $$props;
	let { icon = undefined } = $$props;
	let { iconDescription = undefined } = $$props;
	let { tooltipAlignment = undefined } = $$props;
	let { tooltipPosition = undefined } = $$props;
	let { as = false } = $$props;
	let { skeleton = false } = $$props;
	let { disabled = false } = $$props;
	let { href = undefined } = $$props;
	let { tabindex = "0" } = $$props;
	let { type = "button" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ComposedModal");

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler_2(event) {
		bubble($$self, event);
	}

	function mouseover_handler_2(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("kind" in $$new_props) $$invalidate(11, kind = $$new_props.kind);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("hasIconOnly" in $$new_props) $$invalidate(2, hasIconOnly = $$new_props.hasIconOnly);
		if ("icon" in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ("iconDescription" in $$new_props) $$invalidate(4, iconDescription = $$new_props.iconDescription);
		if ("tooltipAlignment" in $$new_props) $$invalidate(12, tooltipAlignment = $$new_props.tooltipAlignment);
		if ("tooltipPosition" in $$new_props) $$invalidate(13, tooltipPosition = $$new_props.tooltipPosition);
		if ("as" in $$new_props) $$invalidate(5, as = $$new_props.as);
		if ("skeleton" in $$new_props) $$invalidate(6, skeleton = $$new_props.skeleton);
		if ("disabled" in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ("href" in $$new_props) $$invalidate(8, href = $$new_props.href);
		if ("tabindex" in $$new_props) $$invalidate(14, tabindex = $$new_props.tabindex);
		if ("type" in $$new_props) $$invalidate(15, type = $$new_props.type);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*ref*/ 1) {
			 if (ctx && ref) {
				ctx.declareRef(ref);
			}
		}

		 $$invalidate(9, buttonProps = {
			role: "button",
			type: href && !disabled ? undefined : type,
			tabindex,
			disabled,
			href,
			...$$restProps,
			class: [
				"bx--btn",
				size === "field" && "bx--btn--field",
				size === "small" && "bx--btn--sm",
				kind && `bx--btn--${kind}`,
				disabled && "bx--btn--disabled",
				hasIconOnly && "bx--btn--icon-only",
				hasIconOnly && "bx--tooltip__trigger",
				hasIconOnly && "bx--tooltip--a11y",
				hasIconOnly && tooltipPosition && `bx--tooltip--${tooltipPosition}`,
				hasIconOnly && tooltipAlignment && `bx--tooltip--align-${tooltipAlignment}`,
				$$restProps.class
			].filter(Boolean).join(" ")
		});
	};

	return [
		ref,
		size,
		hasIconOnly,
		icon,
		iconDescription,
		as,
		skeleton,
		disabled,
		href,
		buttonProps,
		$$restProps,
		kind,
		tooltipAlignment,
		tooltipPosition,
		tabindex,
		type,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		a_binding,
		button_binding
	];
}

class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2,
			create_fragment$2,
			safe_not_equal,
			{
				kind: 11,
				size: 1,
				hasIconOnly: 2,
				icon: 3,
				iconDescription: 4,
				tooltipAlignment: 12,
				tooltipPosition: 13,
				as: 5,
				skeleton: 6,
				disabled: 7,
				href: 8,
				tabindex: 14,
				type: 15,
				ref: 0
			},
			[-1, -1]
		);
	}
}

/* node_modules/carbon-components-svelte/src/Checkbox/InlineCheckbox.svelte generated by Svelte v3.31.2 */

function create_fragment$3(ctx) {
	let input;
	let input_checked_value;
	let input_aria_checked_value;
	let t;
	let label;
	let label_aria_label_value;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "checkbox" },
		{
			checked: input_checked_value = /*indeterminate*/ ctx[2] ? false : /*checked*/ ctx[1]
		},
		{ indeterminate: /*indeterminate*/ ctx[2] },
		{ id: /*id*/ ctx[4] },
		/*$$restProps*/ ctx[5],
		{ "aria-label": undefined },
		{
			"aria-checked": input_aria_checked_value = /*indeterminate*/ ctx[2] ? "mixed" : /*checked*/ ctx[1]
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			t = space();
			label = element("label");
			set_attributes(input, input_data);
			toggle_class(input, "bx--checkbox", true);
			attr(label, "for", /*id*/ ctx[4]);
			attr(label, "title", /*title*/ ctx[3]);
			attr(label, "aria-label", label_aria_label_value = /*$$props*/ ctx[6]["aria-label"]);
			toggle_class(label, "bx--checkbox-label", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			/*input_binding*/ ctx[8](input);
			insert(target, t, anchor);
			insert(target, label, anchor);

			if (!mounted) {
				dispose = listen(input, "change", /*change_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "checkbox" },
				dirty & /*indeterminate, checked*/ 6 && input_checked_value !== (input_checked_value = /*indeterminate*/ ctx[2] ? false : /*checked*/ ctx[1]) && { checked: input_checked_value },
				dirty & /*indeterminate*/ 4 && { indeterminate: /*indeterminate*/ ctx[2] },
				dirty & /*id*/ 16 && { id: /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5],
				{ "aria-label": undefined },
				dirty & /*indeterminate, checked*/ 6 && input_aria_checked_value !== (input_aria_checked_value = /*indeterminate*/ ctx[2] ? "mixed" : /*checked*/ ctx[1]) && { "aria-checked": input_aria_checked_value }
			]));

			toggle_class(input, "bx--checkbox", true);

			if (dirty & /*id*/ 16) {
				attr(label, "for", /*id*/ ctx[4]);
			}

			if (dirty & /*title*/ 8) {
				attr(label, "title", /*title*/ ctx[3]);
			}

			if (dirty & /*$$props*/ 64 && label_aria_label_value !== (label_aria_label_value = /*$$props*/ ctx[6]["aria-label"])) {
				attr(label, "aria-label", label_aria_label_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[8](null);
			if (detaching) detach(t);
			if (detaching) detach(label);
			mounted = false;
			dispose();
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	const omit_props_names = ["checked","indeterminate","title","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { checked = false } = $$props;
	let { indeterminate = false } = $$props;
	let { title = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("checked" in $$new_props) $$invalidate(1, checked = $$new_props.checked);
		if ("indeterminate" in $$new_props) $$invalidate(2, indeterminate = $$new_props.indeterminate);
		if ("title" in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	$$props = exclude_internal_props($$props);

	return [
		ref,
		checked,
		indeterminate,
		title,
		id,
		$$restProps,
		$$props,
		change_handler,
		input_binding
	];
}

class InlineCheckbox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			checked: 1,
			indeterminate: 2,
			title: 3,
			id: 4,
			ref: 0
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/WarningFilled16/WarningFilled16.svelte generated by Svelte v3.31.2 */

function create_if_block$3(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$1(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$3(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$4(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningFilled16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M8,1C4.2,1,1,4.2,1,8s3.2,7,7,7s7-3.1,7-7S11.9,1,8,1z M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2\tc-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8c0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z");
			attr(path1, "d", "M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2c-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8\tc0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningFilled16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningFilled16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/Close20/Close20.svelte generated by Svelte v3.31.2 */

function create_if_block$4(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$2(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$5(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$2(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Close20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Close20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Close20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-components-svelte/src/RadioButton/RadioButton.svelte generated by Svelte v3.31.2 */

function create_fragment$6(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let span0;
	let t1;
	let span1;
	let t2;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[11]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			t1 = space();
			span1 = element("span");
			t2 = text(/*labelText*/ ctx[5]);
			attr(input, "type", "radio");
			attr(input, "id", /*id*/ ctx[7]);
			attr(input, "name", /*name*/ ctx[8]);
			input.checked = /*checked*/ ctx[0];
			input.disabled = /*disabled*/ ctx[3];
			input.value = /*value*/ ctx[2];
			toggle_class(input, "bx--radio-button", true);
			toggle_class(span0, "bx--radio-button__appearance", true);
			toggle_class(span1, "bx--visually-hidden", /*hideLabel*/ ctx[6]);
			attr(label, "for", /*id*/ ctx[7]);
			toggle_class(label, "bx--radio-button__label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--radio-button-wrapper", true);
			toggle_class(div, "bx--radio-button-wrapper--label-left", /*labelPosition*/ ctx[4] === "left");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			/*input_binding*/ ctx[14](input);
			append(div, t0);
			append(div, label);
			append(label, span0);
			append(label, t1);
			append(label, span1);
			append(span1, t2);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[13]),
					listen(input, "change", /*change_handler_1*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*id*/ 128) {
				attr(input, "id", /*id*/ ctx[7]);
			}

			if (dirty & /*name*/ 256) {
				attr(input, "name", /*name*/ ctx[8]);
			}

			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (dirty & /*disabled*/ 8) {
				input.disabled = /*disabled*/ ctx[3];
			}

			if (dirty & /*value*/ 4) {
				input.value = /*value*/ ctx[2];
			}

			if (dirty & /*labelText*/ 32) set_data(t2, /*labelText*/ ctx[5]);

			if (dirty & /*hideLabel*/ 64) {
				toggle_class(span1, "bx--visually-hidden", /*hideLabel*/ ctx[6]);
			}

			if (dirty & /*id*/ 128) {
				attr(label, "for", /*id*/ ctx[7]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]]));
			toggle_class(div, "bx--radio-button-wrapper", true);
			toggle_class(div, "bx--radio-button-wrapper--label-left", /*labelPosition*/ ctx[4] === "left");
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*input_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"value","checked","disabled","labelPosition","labelText","hideLabel","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { value = "" } = $$props;
	let { checked = false } = $$props;
	let { disabled = false } = $$props;
	let { labelPosition = "right" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("RadioButtonGroup");

	const selectedValue = ctx
	? ctx.selectedValue
	: writable(checked ? value : undefined);

	component_subscribe($$self, selectedValue, value => $$invalidate(12, $selectedValue = value));

	if (ctx) {
		ctx.add({ id, checked, disabled, value });
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler_1 = () => {
		if (ctx) {
			ctx.update(value);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("value" in $$new_props) $$invalidate(2, value = $$new_props.value);
		if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("labelPosition" in $$new_props) $$invalidate(4, labelPosition = $$new_props.labelPosition);
		if ("labelText" in $$new_props) $$invalidate(5, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(6, hideLabel = $$new_props.hideLabel);
		if ("id" in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(8, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue, value*/ 4100) {
			 $$invalidate(0, checked = $selectedValue === value);
		}
	};

	return [
		checked,
		ref,
		value,
		disabled,
		labelPosition,
		labelText,
		hideLabel,
		id,
		name,
		ctx,
		selectedValue,
		$$restProps,
		$selectedValue,
		change_handler,
		input_binding,
		change_handler_1
	];
}

class RadioButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			value: 2,
			checked: 0,
			disabled: 3,
			labelPosition: 4,
			labelText: 5,
			hideLabel: 6,
			id: 7,
			name: 8,
			ref: 1
		});
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/Table.svelte generated by Svelte v3.31.2 */

function create_else_block$2(ctx) {
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let table_levels = [/*$$restProps*/ ctx[6]];
	let table_data = {};

	for (let i = 0; i < table_levels.length; i += 1) {
		table_data = assign(table_data, table_levels[i]);
	}

	return {
		c() {
			table = element("table");
			if (default_slot) default_slot.c();
			set_attributes(table, table_data);
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === "compact");
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === "short");
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === "tall");
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, table, anchor);

			if (default_slot) {
				default_slot.m(table, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			set_attributes(table, table_data = get_spread_update(table_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === "compact");
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === "short");
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === "tall");
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(table);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (24:0) {#if stickyHeader}
function create_if_block$5(ctx) {
	let section;
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let section_levels = [/*$$restProps*/ ctx[6]];
	let section_data = {};

	for (let i = 0; i < section_levels.length; i += 1) {
		section_data = assign(section_data, section_levels[i]);
	}

	return {
		c() {
			section = element("section");
			table = element("table");
			if (default_slot) default_slot.c();
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === "compact");
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === "short");
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === "tall");
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
			set_attributes(section, section_data);
			toggle_class(section, "bx--data-table_inner-container", true);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, table);

			if (default_slot) {
				default_slot.m(table, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === "compact");
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === "short");
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === "tall");
			}

			if (dirty & /*sortable*/ 16) {
				toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			}

			if (dirty & /*zebra*/ 2) {
				toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			}

			if (dirty & /*useStaticWidth*/ 4) {
				toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			}

			if (dirty & /*shouldShowBorder*/ 8) {
				toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			}

			if (dirty & /*stickyHeader*/ 32) {
				toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
			}

			set_attributes(section, section_data = get_spread_update(section_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(section, "bx--data-table_inner-container", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$7(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$5, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*stickyHeader*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$7($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","zebra","useStaticWidth","shouldShowBorder","sortable","stickyHeader"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { zebra = false } = $$props;
	let { useStaticWidth = false } = $$props;
	let { shouldShowBorder = false } = $$props;
	let { sortable = false } = $$props;
	let { stickyHeader = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ("zebra" in $$new_props) $$invalidate(1, zebra = $$new_props.zebra);
		if ("useStaticWidth" in $$new_props) $$invalidate(2, useStaticWidth = $$new_props.useStaticWidth);
		if ("shouldShowBorder" in $$new_props) $$invalidate(3, shouldShowBorder = $$new_props.shouldShowBorder);
		if ("sortable" in $$new_props) $$invalidate(4, sortable = $$new_props.sortable);
		if ("stickyHeader" in $$new_props) $$invalidate(5, stickyHeader = $$new_props.stickyHeader);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		size,
		zebra,
		useStaticWidth,
		shouldShowBorder,
		sortable,
		stickyHeader,
		$$restProps,
		$$scope,
		slots
	];
}

class Table extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
			size: 0,
			zebra: 1,
			useStaticWidth: 2,
			shouldShowBorder: 3,
			sortable: 4,
			stickyHeader: 5
		});
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/TableBody.svelte generated by Svelte v3.31.2 */

function create_fragment$8(ctx) {
	let tbody;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let tbody_levels = [{ "aria-live": "polite" }, /*$$restProps*/ ctx[0]];
	let tbody_data = {};

	for (let i = 0; i < tbody_levels.length; i += 1) {
		tbody_data = assign(tbody_data, tbody_levels[i]);
	}

	return {
		c() {
			tbody = element("tbody");
			if (default_slot) default_slot.c();
			set_attributes(tbody, tbody_data);
		},
		m(target, anchor) {
			insert(target, tbody, anchor);

			if (default_slot) {
				default_slot.m(tbody, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(tbody, tbody_data = get_spread_update(tbody_levels, [
				{ "aria-live": "polite" },
				dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tbody);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$8($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [$$restProps, $$scope, slots];
}

class TableBody extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/TableCell.svelte generated by Svelte v3.31.2 */

function create_fragment$9(ctx) {
	let td;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let td_levels = [/*$$restProps*/ ctx[0]];
	let td_data = {};

	for (let i = 0; i < td_levels.length; i += 1) {
		td_data = assign(td_data, td_levels[i]);
	}

	return {
		c() {
			td = element("td");
			if (default_slot) default_slot.c();
			set_attributes(td, td_data);
		},
		m(target, anchor) {
			insert(target, td, anchor);

			if (default_slot) {
				default_slot.m(td, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(td, "click", /*click_handler*/ ctx[3]),
					listen(td, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(td, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(td, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(td, td_data = get_spread_update(td_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$9($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableCell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/TableContainer.svelte generated by Svelte v3.31.2 */

function create_if_block$6(ctx) {
	let div;
	let h4;
	let t0;
	let t1;
	let p;
	let t2;

	return {
		c() {
			div = element("div");
			h4 = element("h4");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p = element("p");
			t2 = text(/*description*/ ctx[1]);
			toggle_class(h4, "bx--data-table-header__title", true);
			toggle_class(p, "bx--data-table-header__description", true);
			toggle_class(div, "bx--data-table-header", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h4);
			append(h4, t0);
			append(div, t1);
			append(div, p);
			append(p, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*description*/ 2) set_data(t2, /*description*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$a(ctx) {
	let div;
	let t;
	let current;
	let if_block = /*title*/ ctx[0] && create_if_block$6(ctx);
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let div_levels = [/*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--data-table-container", true);
			toggle_class(div, "bx--data-table--max-width", /*stickyHeader*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$6(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--data-table-container", true);
			toggle_class(div, "bx--data-table--max-width", /*stickyHeader*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$a($$self, $$props, $$invalidate) {
	const omit_props_names = ["title","description","stickyHeader"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = "" } = $$props;
	let { description = "" } = $$props;
	let { stickyHeader = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("title" in $$new_props) $$invalidate(0, title = $$new_props.title);
		if ("description" in $$new_props) $$invalidate(1, description = $$new_props.description);
		if ("stickyHeader" in $$new_props) $$invalidate(2, stickyHeader = $$new_props.stickyHeader);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [title, description, stickyHeader, $$restProps, $$scope, slots];
}

class TableContainer extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
			title: 0,
			description: 1,
			stickyHeader: 2
		});
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/TableHead.svelte generated by Svelte v3.31.2 */

function create_fragment$b(ctx) {
	let thead;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let thead_levels = [/*$$restProps*/ ctx[0]];
	let thead_data = {};

	for (let i = 0; i < thead_levels.length; i += 1) {
		thead_data = assign(thead_data, thead_levels[i]);
	}

	return {
		c() {
			thead = element("thead");
			if (default_slot) default_slot.c();
			set_attributes(thead, thead_data);
		},
		m(target, anchor) {
			insert(target, thead, anchor);

			if (default_slot) {
				default_slot.m(thead, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(thead, "click", /*click_handler*/ ctx[3]),
					listen(thead, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(thead, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(thead, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(thead, thead_data = get_spread_update(thead_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(thead);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$b($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableHead extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});
	}
}

/* node_modules/carbon-icons-svelte/lib/ArrowUp20/ArrowUp20.svelte generated by Svelte v3.31.2 */

function create_if_block$7(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$3(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$7(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$7(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$c(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$3(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ArrowUp20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M16 4L6 14 7.41 15.41 15 7.83 15 28 17 28 17 7.83 24.59 15.41 26 14 16 4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ArrowUp20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$c($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ArrowUp20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/ArrowsVertical20/ArrowsVertical20.svelte generated by Svelte v3.31.2 */

function create_if_block$8(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$4(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$8(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$8(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$d(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$4(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ArrowsVertical20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M27.6 20.6L24 24.2 24 4 22 4 22 24.2 18.4 20.6 17 22 23 28 29 22zM9 4L3 10 4.4 11.4 8 7.8 8 28 10 28 10 7.8 13.6 11.4 15 10z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ArrowsVertical20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$d($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ArrowsVertical20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/TableHeader.svelte generated by Svelte v3.31.2 */

function create_else_block$3(ctx) {
	let th;
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	let th_levels = [{ scope: /*scope*/ ctx[0] }, { id: /*id*/ ctx[1] }, /*$$restProps*/ ctx[8]];
	let th_data = {};

	for (let i = 0; i < th_levels.length; i += 1) {
		th_data = assign(th_data, th_levels[i]);
	}

	return {
		c() {
			th = element("th");
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--table-header-label", true);
			set_attributes(th, th_data);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(th, "click", /*click_handler_1*/ ctx[16]),
					listen(th, "mouseover", /*mouseover_handler_1*/ ctx[17]),
					listen(th, "mouseenter", /*mouseenter_handler_1*/ ctx[18]),
					listen(th, "mouseleave", /*mouseleave_handler_1*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			set_attributes(th, th_data = get_spread_update(th_levels, [
				(!current || dirty & /*scope*/ 1) && { scope: /*scope*/ ctx[0] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (27:0) {#if $tableSortable}
function create_if_block$9(ctx) {
	let th;
	let button;
	let div;
	let t0;
	let arrowup20;
	let t1;
	let arrowsvertical20;
	let th_aria_sort_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	arrowup20 = new ArrowUp20({
			props: {
				"aria-label": /*ariaLabel*/ ctx[4],
				class: "bx--table-sort__icon"
			}
		});

	arrowsvertical20 = new ArrowsVertical20({
			props: {
				"aria-label": /*ariaLabel*/ ctx[4],
				class: "bx--table-sort__icon-unsorted"
			}
		});

	let th_levels = [
		{
			"aria-sort": th_aria_sort_value = /*active*/ ctx[3]
			? /*$sortHeader*/ ctx[2].sortDirection
			: "none"
		},
		{ scope: /*scope*/ ctx[0] },
		{ id: /*id*/ ctx[1] },
		/*$$restProps*/ ctx[8]
	];

	let th_data = {};

	for (let i = 0; i < th_levels.length; i += 1) {
		th_data = assign(th_data, th_levels[i]);
	}

	return {
		c() {
			th = element("th");
			button = element("button");
			div = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(arrowup20.$$.fragment);
			t1 = space();
			create_component(arrowsvertical20.$$.fragment);
			toggle_class(div, "bx--table-header-label", true);
			toggle_class(button, "bx--table-sort", true);
			toggle_class(button, "bx--table-sort--active", /*active*/ ctx[3]);
			toggle_class(button, "bx--table-sort--ascending", /*active*/ ctx[3] && /*$sortHeader*/ ctx[2].sortDirection === "descending");
			set_attributes(th, th_data);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, button);
			append(button, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(button, t0);
			mount_component(arrowup20, button, null);
			append(button, t1);
			mount_component(arrowsvertical20, button, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[15]),
					listen(th, "mouseover", /*mouseover_handler*/ ctx[12]),
					listen(th, "mouseenter", /*mouseenter_handler*/ ctx[13]),
					listen(th, "mouseleave", /*mouseleave_handler*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			const arrowup20_changes = {};
			if (dirty & /*ariaLabel*/ 16) arrowup20_changes["aria-label"] = /*ariaLabel*/ ctx[4];
			arrowup20.$set(arrowup20_changes);
			const arrowsvertical20_changes = {};
			if (dirty & /*ariaLabel*/ 16) arrowsvertical20_changes["aria-label"] = /*ariaLabel*/ ctx[4];
			arrowsvertical20.$set(arrowsvertical20_changes);

			if (dirty & /*active*/ 8) {
				toggle_class(button, "bx--table-sort--active", /*active*/ ctx[3]);
			}

			if (dirty & /*active, $sortHeader*/ 12) {
				toggle_class(button, "bx--table-sort--ascending", /*active*/ ctx[3] && /*$sortHeader*/ ctx[2].sortDirection === "descending");
			}

			set_attributes(th, th_data = get_spread_update(th_levels, [
				(!current || dirty & /*active, $sortHeader*/ 12 && th_aria_sort_value !== (th_aria_sort_value = /*active*/ ctx[3]
				? /*$sortHeader*/ ctx[2].sortDirection
				: "none")) && { "aria-sort": th_aria_sort_value },
				(!current || dirty & /*scope*/ 1) && { scope: /*scope*/ ctx[0] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(arrowup20.$$.fragment, local);
			transition_in(arrowsvertical20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(arrowup20.$$.fragment, local);
			transition_out(arrowsvertical20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (default_slot) default_slot.d(detaching);
			destroy_component(arrowup20);
			destroy_component(arrowsvertical20);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$e(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$9, create_else_block$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$tableSortable*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$e($$self, $$props, $$invalidate) {
	let active;
	let ariaLabel;
	const omit_props_names = ["scope","translateWithId","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $sortHeader;
	let $tableSortable;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { scope = "col" } = $$props;
	let { translateWithId = () => "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const { sortHeader, tableSortable, add } = getContext("DataTable");
	component_subscribe($$self, sortHeader, value => $$invalidate(2, $sortHeader = value));
	component_subscribe($$self, tableSortable, value => $$invalidate(5, $tableSortable = value));
	add(id);

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("scope" in $$new_props) $$invalidate(0, scope = $$new_props.scope);
		if ("translateWithId" in $$new_props) $$invalidate(9, translateWithId = $$new_props.translateWithId);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sortHeader, id*/ 6) {
			 $$invalidate(3, active = $sortHeader.id === id);
		}

		if ($$self.$$.dirty & /*translateWithId*/ 512) {
			// TODO: translate with id
			 $$invalidate(4, ariaLabel = translateWithId());
		}
	};

	return [
		scope,
		id,
		$sortHeader,
		active,
		ariaLabel,
		$tableSortable,
		sortHeader,
		tableSortable,
		$$restProps,
		translateWithId,
		$$scope,
		slots,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class TableHeader extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$e, create_fragment$e, safe_not_equal, { scope: 0, translateWithId: 9, id: 1 });
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/TableRow.svelte generated by Svelte v3.31.2 */

function create_fragment$f(ctx) {
	let tr;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let tr_levels = [/*$$restProps*/ ctx[0]];
	let tr_data = {};

	for (let i = 0; i < tr_levels.length; i += 1) {
		tr_data = assign(tr_data, tr_levels[i]);
	}

	return {
		c() {
			tr = element("tr");
			if (default_slot) default_slot.c();
			set_attributes(tr, tr_data);
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			if (default_slot) {
				default_slot.m(tr, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(tr, "click", /*click_handler*/ ctx[3]),
					listen(tr, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(tr, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(tr, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(tr, tr_data = get_spread_update(tr_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$f($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableRow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/DataTable.svelte generated by Svelte v3.31.2 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[52] = list[i];
	child_ctx[54] = i;
	return child_ctx;
}

const get_expanded_row_slot_changes = dirty => ({
	row: dirty[0] & /*sorting, sortedRows, rows*/ 8454145
});

const get_expanded_row_slot_context = ctx => ({ row: /*row*/ ctx[52] });

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[55] = list[i];
	child_ctx[57] = i;
	return child_ctx;
}

const get_cell_slot_changes_1 = dirty => ({
	row: dirty[0] & /*sorting, sortedRows, rows*/ 8454145,
	cell: dirty[0] & /*sorting, sortedRows, rows*/ 8454145
});

const get_cell_slot_context_1 = ctx => ({
	row: /*row*/ ctx[52],
	cell: /*cell*/ ctx[55]
});

const get_cell_slot_changes = dirty => ({
	row: dirty[0] & /*sorting, sortedRows, rows*/ 8454145,
	cell: dirty[0] & /*sorting, sortedRows, rows*/ 8454145
});

const get_cell_slot_context = ctx => ({
	row: /*row*/ ctx[52],
	cell: /*cell*/ ctx[55]
});

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[58] = list[i];
	child_ctx[54] = i;
	return child_ctx;
}

const get_cell_header_slot_changes = dirty => ({ header: dirty[0] & /*headers*/ 32 });
const get_cell_header_slot_context = ctx => ({ header: /*header*/ ctx[58] });

// (198:8) {#if expandable}
function create_if_block_8(ctx) {
	let th;
	let th_data_previous_value_value;
	let current;
	let if_block = /*batchExpansion*/ ctx[11] && create_if_block_9(ctx);

	return {
		c() {
			th = element("th");
			if (if_block) if_block.c();
			attr(th, "scope", "col");
			attr(th, "data-previous-value", th_data_previous_value_value = /*expanded*/ ctx[17] ? "collapsed" : undefined);
			toggle_class(th, "bx--table-expand", true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			if (if_block) if_block.m(th, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*batchExpansion*/ ctx[11]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*batchExpansion*/ 2048) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_9(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(th, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*expanded*/ 131072 && th_data_previous_value_value !== (th_data_previous_value_value = /*expanded*/ ctx[17] ? "collapsed" : undefined)) {
				attr(th, "data-previous-value", th_data_previous_value_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (if_block) if_block.d();
		}
	};
}

// (204:12) {#if batchExpansion}
function create_if_block_9(ctx) {
	let button;
	let chevronright16;
	let current;
	let mounted;
	let dispose;

	chevronright16 = new ChevronRight16({
			props: { class: "bx--table-expand__svg" }
		});

	return {
		c() {
			button = element("button");
			create_component(chevronright16.$$.fragment);
			attr(button, "type", "button");
			toggle_class(button, "bx--table-expand__button", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(chevronright16, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[35]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(chevronright16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(chevronright16);
			mounted = false;
			dispose();
		}
	};
}

// (220:8) {#if selectable && !batchSelection}
function create_if_block_7(ctx) {
	let th;

	return {
		c() {
			th = element("th");
			attr(th, "scope", "col");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (223:8) {#if batchSelection && !radio}
function create_if_block_6(ctx) {
	let th;
	let inlinecheckbox;
	let updating_ref;
	let current;

	function inlinecheckbox_ref_binding(value) {
		/*inlinecheckbox_ref_binding*/ ctx[36].call(null, value);
	}

	let inlinecheckbox_props = {
		"aria-label": "Select all rows",
		checked: /*selectAll*/ ctx[19],
		indeterminate: /*indeterminate*/ ctx[22]
	};

	if (/*refSelectAll*/ ctx[20] !== void 0) {
		inlinecheckbox_props.ref = /*refSelectAll*/ ctx[20];
	}

	inlinecheckbox = new InlineCheckbox({ props: inlinecheckbox_props });
	binding_callbacks.push(() => bind(inlinecheckbox, "ref", inlinecheckbox_ref_binding));
	inlinecheckbox.$on("change", /*change_handler*/ ctx[37]);

	return {
		c() {
			th = element("th");
			create_component(inlinecheckbox.$$.fragment);
			attr(th, "scope", "col");
			toggle_class(th, "bx--table-column-checkbox", true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			mount_component(inlinecheckbox, th, null);
			current = true;
		},
		p(ctx, dirty) {
			const inlinecheckbox_changes = {};
			if (dirty[0] & /*selectAll*/ 524288) inlinecheckbox_changes.checked = /*selectAll*/ ctx[19];
			if (dirty[0] & /*indeterminate*/ 4194304) inlinecheckbox_changes.indeterminate = /*indeterminate*/ ctx[22];

			if (!updating_ref && dirty[0] & /*refSelectAll*/ 1048576) {
				updating_ref = true;
				inlinecheckbox_changes.ref = /*refSelectAll*/ ctx[20];
				add_flush_callback(() => updating_ref = false);
			}

			inlinecheckbox.$set(inlinecheckbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inlinecheckbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinecheckbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			destroy_component(inlinecheckbox);
		}
	};
}

// (250:10) {:else}
function create_else_block_2(ctx) {
	let tableheader;
	let current;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[38](/*header*/ ctx[58]);
	}

	tableheader = new TableHeader({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	tableheader.$on("click", click_handler_1);

	return {
		c() {
			create_component(tableheader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tableheader, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tableheader_changes = {};

			if (dirty[0] & /*headers*/ 32 | dirty[1] & /*$$scope*/ 131072) {
				tableheader_changes.$$scope = { dirty, ctx };
			}

			tableheader.$set(tableheader_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tableheader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tableheader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tableheader, detaching);
		}
	};
}

// (248:10) {#if header.empty}
function create_if_block_5(ctx) {
	let th;

	return {
		c() {
			th = element("th");
			attr(th, "scope", "col");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (266:57) {header.value}
function fallback_block_2(ctx) {
	let t_value = /*header*/ ctx[58].value + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*headers*/ 32 && t_value !== (t_value = /*header*/ ctx[58].value + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (251:12) <TableHeader               on:click="{() => {                 dispatch('click', { header });                 let active = header.key === $sortHeader.key;                 let currentSortDirection = active ? $sortHeader.sortDirection : 'none';                 let sortDirection = sortDirectionMap[currentSortDirection];                 dispatch('click:header', { header, sortDirection });                 sortHeader.set({                   id: sortDirection === 'none' ? null : $thKeys[header.key],                   key: header.key,                   sort: header.sort,                   sortDirection,                 });               }}"             >
function create_default_slot_9(ctx) {
	let t;
	let current;
	const cell_header_slot_template = /*#slots*/ ctx[34]["cell-header"];
	const cell_header_slot = create_slot(cell_header_slot_template, ctx, /*$$scope*/ ctx[48], get_cell_header_slot_context);
	const cell_header_slot_or_fallback = cell_header_slot || fallback_block_2(ctx);

	return {
		c() {
			if (cell_header_slot_or_fallback) cell_header_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (cell_header_slot_or_fallback) {
				cell_header_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_header_slot) {
				if (cell_header_slot.p && dirty[0] & /*headers*/ 32 | dirty[1] & /*$$scope*/ 131072) {
					update_slot(cell_header_slot, cell_header_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_cell_header_slot_changes, get_cell_header_slot_context);
				}
			} else {
				if (cell_header_slot_or_fallback && cell_header_slot_or_fallback.p && dirty[0] & /*headers*/ 32) {
					cell_header_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_header_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_header_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cell_header_slot_or_fallback) cell_header_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (247:8) {#each headers as header, i (header.key)}
function create_each_block_2(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_5, create_else_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*header*/ ctx[58].empty) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (197:6) <TableRow>
function create_default_slot_8(ctx) {
	let t0;
	let t1;
	let t2;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let if_block0 = /*expandable*/ ctx[3] && create_if_block_8(ctx);
	let if_block1 = /*selectable*/ ctx[4] && !/*batchSelection*/ ctx[13] && create_if_block_7();
	let if_block2 = /*batchSelection*/ ctx[13] && !/*radio*/ ctx[12] && create_if_block_6(ctx);
	let each_value_2 = /*headers*/ ctx[5];
	const get_key = ctx => /*header*/ ctx[58].key;

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
	}

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*expandable*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*expandable*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_8(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selectable*/ ctx[4] && !/*batchSelection*/ ctx[13]) {
				if (if_block1) ; else {
					if_block1 = create_if_block_7();
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*batchSelection*/ ctx[13] && !/*radio*/ ctx[12]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*batchSelection, radio*/ 12288) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_6(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*headers, dispatch, $sortHeader, sortDirectionMap, sortHeader, $thKeys*/ 251691040 | dirty[1] & /*$$scope*/ 131072) {
				each_value_2 = /*headers*/ ctx[5];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_2, each_1_anchor, get_each_context_2);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block2);

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (196:4) <TableHead>
function create_default_slot_7(ctx) {
	let tablerow;
	let current;

	tablerow = new TableRow({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablerow.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablerow, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablerow_changes = {};

			if (dirty[0] & /*headers, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, selectedRowIds, rows, batchSelection, radio, selectable, expanded, expandedRowIds, batchExpansion, expandable*/ 22722623 | dirty[1] & /*$$scope*/ 131072) {
				tablerow_changes.$$scope = { dirty, ctx };
			}

			tablerow.$set(tablerow_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablerow.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablerow.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablerow, detaching);
		}
	};
}

// (288:10) {#if expandable}
function create_if_block_4$1(ctx) {
	let tablecell;
	let current;

	tablecell = new TableCell({
			props: {
				class: "bx--table-expand",
				headers: "expand",
				"data-previous-value": /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
				? "collapsed"
				: undefined,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablecell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecell, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecell_changes = {};

			if (dirty[0] & /*expandedRows, sorting, sortedRows, rows*/ 10551297) tablecell_changes["data-previous-value"] = /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
			? "collapsed"
			: undefined;

			if (dirty[0] & /*expandedRows, sorting, sortedRows, rows, expandedRowIds*/ 10551299 | dirty[1] & /*$$scope*/ 131072) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecell, detaching);
		}
	};
}

// (289:12) <TableCell               class="bx--table-expand"               headers="expand"               data-previous-value="{expandedRows[row.id] ? 'collapsed' : undefined}"             >
function create_default_slot_6(ctx) {
	let button;
	let chevronright16;
	let button_aria_label_value;
	let current;
	let mounted;
	let dispose;

	chevronright16 = new ChevronRight16({
			props: { class: "bx--table-expand__svg" }
		});

	function click_handler_2() {
		return /*click_handler_2*/ ctx[39](/*row*/ ctx[52]);
	}

	return {
		c() {
			button = element("button");
			create_component(chevronright16.$$.fragment);
			attr(button, "type", "button");

			attr(button, "aria-label", button_aria_label_value = /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
			? "Collapse current row"
			: "Expand current row");

			toggle_class(button, "bx--table-expand__button", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(chevronright16, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", click_handler_2);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty[0] & /*expandedRows, sorting, sortedRows, rows*/ 10551297 && button_aria_label_value !== (button_aria_label_value = /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
			? "Collapse current row"
			: "Expand current row")) {
				attr(button, "aria-label", button_aria_label_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(chevronright16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(chevronright16);
			mounted = false;
			dispose();
		}
	};
}

// (313:10) {#if selectable}
function create_if_block_2$1(ctx) {
	let td;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_3$1, create_else_block_1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*radio*/ ctx[12]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			td = element("td");
			if_block.c();
			toggle_class(td, "bx--table-column-checkbox", true);
			toggle_class(td, "bx--table-column-radio", /*radio*/ ctx[12]);
		},
		m(target, anchor) {
			insert(target, td, anchor);
			if_blocks[current_block_type_index].m(td, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(td, null);
			}

			if (dirty[0] & /*radio*/ 4096) {
				toggle_class(td, "bx--table-column-radio", /*radio*/ ctx[12]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (326:14) {:else}
function create_else_block_1(ctx) {
	let inlinecheckbox;
	let current;

	function change_handler_2() {
		return /*change_handler_2*/ ctx[41](/*row*/ ctx[52]);
	}

	inlinecheckbox = new InlineCheckbox({
			props: {
				name: "select-row-" + /*row*/ ctx[52].id,
				checked: /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id)
			}
		});

	inlinecheckbox.$on("change", change_handler_2);

	return {
		c() {
			create_component(inlinecheckbox.$$.fragment);
		},
		m(target, anchor) {
			mount_component(inlinecheckbox, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const inlinecheckbox_changes = {};
			if (dirty[0] & /*sorting, sortedRows, rows*/ 8454145) inlinecheckbox_changes.name = "select-row-" + /*row*/ ctx[52].id;
			if (dirty[0] & /*selectedRowIds, sorting, sortedRows, rows*/ 8454149) inlinecheckbox_changes.checked = /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id);
			inlinecheckbox.$set(inlinecheckbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inlinecheckbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinecheckbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(inlinecheckbox, detaching);
		}
	};
}

// (318:14) {#if radio}
function create_if_block_3$1(ctx) {
	let radiobutton;
	let current;

	function change_handler_1() {
		return /*change_handler_1*/ ctx[40](/*row*/ ctx[52]);
	}

	radiobutton = new RadioButton({
			props: {
				name: "select-row-" + /*row*/ ctx[52].id,
				checked: /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id)
			}
		});

	radiobutton.$on("change", change_handler_1);

	return {
		c() {
			create_component(radiobutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(radiobutton, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const radiobutton_changes = {};
			if (dirty[0] & /*sorting, sortedRows, rows*/ 8454145) radiobutton_changes.name = "select-row-" + /*row*/ ctx[52].id;
			if (dirty[0] & /*selectedRowIds, sorting, sortedRows, rows*/ 8454149) radiobutton_changes.checked = /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id);
			radiobutton.$set(radiobutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(radiobutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(radiobutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(radiobutton, detaching);
		}
	};
}

// (348:12) {:else}
function create_else_block$4(ctx) {
	let tablecell;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[42](/*row*/ ctx[52], /*cell*/ ctx[55]);
	}

	tablecell = new TableCell({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	tablecell.$on("click", click_handler_3);

	return {
		c() {
			create_component(tablecell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecell, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablecell_changes = {};

			if (dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177 | dirty[1] & /*$$scope*/ 131072) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecell, detaching);
		}
	};
}

// (342:12) {#if headers[j].empty}
function create_if_block_1$1(ctx) {
	let td;
	let t;
	let current;
	const cell_slot_template = /*#slots*/ ctx[34].cell;
	const cell_slot = create_slot(cell_slot_template, ctx, /*$$scope*/ ctx[48], get_cell_slot_context);
	const cell_slot_or_fallback = cell_slot || fallback_block$5(ctx);

	return {
		c() {
			td = element("td");
			if (cell_slot_or_fallback) cell_slot_or_fallback.c();
			t = space();
			toggle_class(td, "bx--table-column-menu", /*headers*/ ctx[5][/*j*/ ctx[57]].columnMenu);
		},
		m(target, anchor) {
			insert(target, td, anchor);

			if (cell_slot_or_fallback) {
				cell_slot_or_fallback.m(td, null);
			}

			append(td, t);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_slot) {
				if (cell_slot.p && dirty[0] & /*sorting, sortedRows, rows*/ 8454145 | dirty[1] & /*$$scope*/ 131072) {
					update_slot(cell_slot, cell_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_cell_slot_changes, get_cell_slot_context);
				}
			} else {
				if (cell_slot_or_fallback && cell_slot_or_fallback.p && dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177) {
					cell_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177) {
				toggle_class(td, "bx--table-column-menu", /*headers*/ ctx[5][/*j*/ ctx[57]].columnMenu);
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if (cell_slot_or_fallback) cell_slot_or_fallback.d(detaching);
		}
	};
}

// (355:60)                    
function fallback_block_1(ctx) {
	let t_value = (/*headers*/ ctx[5][/*j*/ ctx[57]].display
	? /*headers*/ ctx[5][/*j*/ ctx[57]].display(/*cell*/ ctx[55].value)
	: /*cell*/ ctx[55].value) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177 && t_value !== (t_value = (/*headers*/ ctx[5][/*j*/ ctx[57]].display
			? /*headers*/ ctx[5][/*j*/ ctx[57]].display(/*cell*/ ctx[55].value)
			: /*cell*/ ctx[55].value) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (349:14) <TableCell                 on:click="{() => {                   dispatch('click', { row, cell });                   dispatch('click:cell', cell);                 }}"               >
function create_default_slot_5(ctx) {
	let t;
	let current;
	const cell_slot_template = /*#slots*/ ctx[34].cell;
	const cell_slot = create_slot(cell_slot_template, ctx, /*$$scope*/ ctx[48], get_cell_slot_context_1);
	const cell_slot_or_fallback = cell_slot || fallback_block_1(ctx);

	return {
		c() {
			if (cell_slot_or_fallback) cell_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (cell_slot_or_fallback) {
				cell_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_slot) {
				if (cell_slot.p && dirty[0] & /*sorting, sortedRows, rows*/ 8454145 | dirty[1] & /*$$scope*/ 131072) {
					update_slot(cell_slot, cell_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_cell_slot_changes_1, get_cell_slot_context_1);
				}
			} else {
				if (cell_slot_or_fallback && cell_slot_or_fallback.p && dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177) {
					cell_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cell_slot_or_fallback) cell_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (344:60)                    
function fallback_block$5(ctx) {
	let t_value = (/*headers*/ ctx[5][/*j*/ ctx[57]].display
	? /*headers*/ ctx[5][/*j*/ ctx[57]].display(/*cell*/ ctx[55].value)
	: /*cell*/ ctx[55].value) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177 && t_value !== (t_value = (/*headers*/ ctx[5][/*j*/ ctx[57]].display
			? /*headers*/ ctx[5][/*j*/ ctx[57]].display(/*cell*/ ctx[55].value)
			: /*cell*/ ctx[55].value) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (341:10) {#each row.cells as cell, j (cell.key)}
function create_each_block_1(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$1, create_else_block$4];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*headers*/ ctx[5][/*j*/ ctx[57]].empty) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (274:8) <TableRow           id="row-{row.id}"           class="{selectedRowIds.includes(row.id) ? 'bx--data-table--selected' : ''} {expandedRows[row.id] ? 'bx--expandable-row' : ''} {expandable ? 'bx--parent-row' : ''} {expandable && parentRowId === row.id ? 'bx--expandable-row--hover' : ''}"           on:click="{() => {             dispatch('click', { row });             dispatch('click:row', row);           }}"           on:mouseenter="{() => {             dispatch('mouseenter:row', row);           }}"           on:mouseleave="{() => {             dispatch('mouseleave:row', row);           }}"         >
function create_default_slot_4(ctx) {
	let t0;
	let t1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let if_block0 = /*expandable*/ ctx[3] && create_if_block_4$1(ctx);
	let if_block1 = /*selectable*/ ctx[4] && create_if_block_2$1(ctx);
	let each_value_1 = /*row*/ ctx[52].cells;
	const get_key = ctx => /*cell*/ ctx[55].key;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*expandable*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*expandable*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selectable*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*selectable*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*headers, sorting, sortedRows, rows, dispatch*/ 75563041 | dirty[1] & /*$$scope*/ 131072) {
				each_value_1 = /*row*/ ctx[52].cells;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_1, each_1_anchor, get_each_context_1);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (363:8) {#if expandable && expandedRows[row.id]}
function create_if_block$a(ctx) {
	let tr;
	let tablecell;
	let t;
	let current;
	let mounted;
	let dispose;

	tablecell = new TableCell({
			props: {
				colspan: /*headers*/ ctx[5].length + 1,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	function mouseenter_handler_1() {
		return /*mouseenter_handler_1*/ ctx[46](/*row*/ ctx[52]);
	}

	return {
		c() {
			tr = element("tr");
			create_component(tablecell.$$.fragment);
			t = space();
			attr(tr, "data-child-row", "");
			toggle_class(tr, "bx--expandable-row", true);
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			mount_component(tablecell, tr, null);
			append(tr, t);
			current = true;

			if (!mounted) {
				dispose = [
					listen(tr, "mouseenter", mouseenter_handler_1),
					listen(tr, "mouseleave", /*mouseleave_handler_1*/ ctx[47])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablecell_changes = {};
			if (dirty[0] & /*headers*/ 32) tablecell_changes.colspan = /*headers*/ ctx[5].length + 1;

			if (dirty[0] & /*sorting, sortedRows, rows*/ 8454145 | dirty[1] & /*$$scope*/ 131072) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_component(tablecell);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (374:12) <TableCell colspan="{headers.length + 1}">
function create_default_slot_3(ctx) {
	let div;
	let current;
	const expanded_row_slot_template = /*#slots*/ ctx[34]["expanded-row"];
	const expanded_row_slot = create_slot(expanded_row_slot_template, ctx, /*$$scope*/ ctx[48], get_expanded_row_slot_context);

	return {
		c() {
			div = element("div");
			if (expanded_row_slot) expanded_row_slot.c();
			toggle_class(div, "bx--child-row-inner-container", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (expanded_row_slot) {
				expanded_row_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (expanded_row_slot) {
				if (expanded_row_slot.p && dirty[0] & /*sorting, sortedRows, rows*/ 8454145 | dirty[1] & /*$$scope*/ 131072) {
					update_slot(expanded_row_slot, expanded_row_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_expanded_row_slot_changes, get_expanded_row_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(expanded_row_slot, local);
			current = true;
		},
		o(local) {
			transition_out(expanded_row_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (expanded_row_slot) expanded_row_slot.d(detaching);
		}
	};
}

// (273:6) {#each sorting ? sortedRows : rows as row, i (row.id)}
function create_each_block(key_1, ctx) {
	let first;
	let tablerow;
	let t;
	let if_block_anchor;
	let current;

	function click_handler_4() {
		return /*click_handler_4*/ ctx[43](/*row*/ ctx[52]);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[44](/*row*/ ctx[52]);
	}

	function mouseleave_handler() {
		return /*mouseleave_handler*/ ctx[45](/*row*/ ctx[52]);
	}

	tablerow = new TableRow({
			props: {
				id: "row-" + /*row*/ ctx[52].id,
				class: "" + ((/*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id)
				? "bx--data-table--selected"
				: "") + " " + (/*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
				? "bx--expandable-row"
				: "") + " " + (/*expandable*/ ctx[3] ? "bx--parent-row" : "") + " " + (/*expandable*/ ctx[3] && /*parentRowId*/ ctx[18] === /*row*/ ctx[52].id
				? "bx--expandable-row--hover"
				: "")),
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	tablerow.$on("click", click_handler_4);
	tablerow.$on("mouseenter", mouseenter_handler);
	tablerow.$on("mouseleave", mouseleave_handler);
	let if_block = /*expandable*/ ctx[3] && /*expandedRows*/ ctx[21][/*row*/ ctx[52].id] && create_if_block$a(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(tablerow.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(tablerow, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablerow_changes = {};
			if (dirty[0] & /*sorting, sortedRows, rows*/ 8454145) tablerow_changes.id = "row-" + /*row*/ ctx[52].id;

			if (dirty[0] & /*selectedRowIds, sorting, sortedRows, rows, expandedRows, expandable, parentRowId*/ 10813453) tablerow_changes.class = "" + ((/*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id)
			? "bx--data-table--selected"
			: "") + " " + (/*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
			? "bx--expandable-row"
			: "") + " " + (/*expandable*/ ctx[3] ? "bx--parent-row" : "") + " " + (/*expandable*/ ctx[3] && /*parentRowId*/ ctx[18] === /*row*/ ctx[52].id
			? "bx--expandable-row--hover"
			: ""));

			if (dirty[0] & /*sorting, sortedRows, rows, headers, radio, selectedRowIds, selectable, expandedRows, expandedRowIds, expandable*/ 10555455 | dirty[1] & /*$$scope*/ 131072) {
				tablerow_changes.$$scope = { dirty, ctx };
			}

			tablerow.$set(tablerow_changes);

			if (/*expandable*/ ctx[3] && /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*expandable, expandedRows, sorting, sortedRows, rows*/ 10551305) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$a(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(tablerow.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(tablerow.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(tablerow, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (272:4) <TableBody>
function create_default_slot_2(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;

	let each_value = /*sorting*/ ctx[16]
	? /*sortedRows*/ ctx[23]
	: /*rows*/ ctx[0];

	const get_key = ctx => /*row*/ ctx[52].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*parentRowId, sorting, sortedRows, rows, headers, expandable, expandedRows, selectedRowIds, dispatch, radio, selectable, expandedRowIds*/ 77926463 | dirty[1] & /*$$scope*/ 131072) {
				each_value = /*sorting*/ ctx[16]
				? /*sortedRows*/ ctx[23]
				: /*rows*/ ctx[0];

				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (190:2) <Table     zebra="{zebra}"     size="{size}"     stickyHeader="{stickyHeader}"     sortable="{sortable}"   >
function create_default_slot_1(ctx) {
	let tablehead;
	let t;
	let tablebody;
	let current;

	tablehead = new TableHead({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	tablebody = new TableBody({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablehead.$$.fragment);
			t = space();
			create_component(tablebody.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablehead, target, anchor);
			insert(target, t, anchor);
			mount_component(tablebody, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablehead_changes = {};

			if (dirty[0] & /*headers, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, selectedRowIds, rows, batchSelection, radio, selectable, expanded, expandedRowIds, batchExpansion, expandable*/ 22722623 | dirty[1] & /*$$scope*/ 131072) {
				tablehead_changes.$$scope = { dirty, ctx };
			}

			tablehead.$set(tablehead_changes);
			const tablebody_changes = {};

			if (dirty[0] & /*sorting, sortedRows, rows, parentRowId, headers, expandable, expandedRows, selectedRowIds, radio, selectable, expandedRowIds*/ 10817599 | dirty[1] & /*$$scope*/ 131072) {
				tablebody_changes.$$scope = { dirty, ctx };
			}

			tablebody.$set(tablebody_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablehead.$$.fragment, local);
			transition_in(tablebody.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablehead.$$.fragment, local);
			transition_out(tablebody.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablehead, detaching);
			if (detaching) detach(t);
			destroy_component(tablebody, detaching);
		}
	};
}

// (188:0) <TableContainer title="{title}" description="{description}" {...$$restProps}>
function create_default_slot(ctx) {
	let t;
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[34].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[48], null);

	table = new Table({
			props: {
				zebra: /*zebra*/ ctx[9],
				size: /*size*/ ctx[6],
				stickyHeader: /*stickyHeader*/ ctx[14],
				sortable: /*sortable*/ ctx[10],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			if (default_slot) default_slot.c();
			t = space();
			create_component(table.$$.fragment);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			insert(target, t, anchor);
			mount_component(table, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[1] & /*$$scope*/ 131072) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[48], dirty, null, null);
				}
			}

			const table_changes = {};
			if (dirty[0] & /*zebra*/ 512) table_changes.zebra = /*zebra*/ ctx[9];
			if (dirty[0] & /*size*/ 64) table_changes.size = /*size*/ ctx[6];
			if (dirty[0] & /*stickyHeader*/ 16384) table_changes.stickyHeader = /*stickyHeader*/ ctx[14];
			if (dirty[0] & /*sortable*/ 1024) table_changes.sortable = /*sortable*/ ctx[10];

			if (dirty[0] & /*sorting, sortedRows, rows, parentRowId, headers, expandable, expandedRows, selectedRowIds, radio, selectable, expandedRowIds, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, batchSelection, expanded, batchExpansion*/ 33536063 | dirty[1] & /*$$scope*/ 131072) {
				table_changes.$$scope = { dirty, ctx };
			}

			table.$set(table_changes);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t);
			destroy_component(table, detaching);
		}
	};
}

function create_fragment$g(ctx) {
	let tablecontainer;
	let current;

	const tablecontainer_spread_levels = [
		{ title: /*title*/ ctx[7] },
		{ description: /*description*/ ctx[8] },
		/*$$restProps*/ ctx[30]
	];

	let tablecontainer_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < tablecontainer_spread_levels.length; i += 1) {
		tablecontainer_props = assign(tablecontainer_props, tablecontainer_spread_levels[i]);
	}

	tablecontainer = new TableContainer({ props: tablecontainer_props });

	return {
		c() {
			create_component(tablecontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecontainer, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecontainer_changes = (dirty[0] & /*title, description, $$restProps*/ 1073742208)
			? get_spread_update(tablecontainer_spread_levels, [
					dirty[0] & /*title*/ 128 && { title: /*title*/ ctx[7] },
					dirty[0] & /*description*/ 256 && { description: /*description*/ ctx[8] },
					dirty[0] & /*$$restProps*/ 1073741824 && get_spread_object(/*$$restProps*/ ctx[30])
				])
			: {};

			if (dirty[0] & /*zebra, size, stickyHeader, sortable, sorting, sortedRows, rows, parentRowId, headers, expandable, expandedRows, selectedRowIds, radio, selectable, expandedRowIds, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, batchSelection, expanded, batchExpansion*/ 33554047 | dirty[1] & /*$$scope*/ 131072) {
				tablecontainer_changes.$$scope = { dirty, ctx };
			}

			tablecontainer.$set(tablecontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecontainer, detaching);
		}
	};
}

function instance$g($$self, $$props, $$invalidate) {
	let expandedRows;
	let indeterminate;
	let headerKeys;
	let sortedRows;
	let ascending;
	let sortKey;
	let sorting;

	const omit_props_names = [
		"headers","rows","size","title","description","zebra","sortable","expandable","batchExpansion","expandedRowIds","radio","selectable","batchSelection","selectedRowIds","stickyHeader"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $headerItems;
	let $sortHeader;
	let $thKeys;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { headers = [] } = $$props;
	let { rows = [] } = $$props;
	let { size = undefined } = $$props;
	let { title = "" } = $$props;
	let { description = "" } = $$props;
	let { zebra = false } = $$props;
	let { sortable = false } = $$props;
	let { expandable = false } = $$props;
	let { batchExpansion = false } = $$props;
	let { expandedRowIds = [] } = $$props;
	let { radio = false } = $$props;
	let { selectable = false } = $$props;
	let { batchSelection = false } = $$props;
	let { selectedRowIds = [] } = $$props;
	let { stickyHeader = false } = $$props;

	const sortDirectionMap = {
		none: "ascending",
		ascending: "descending",
		descending: "none"
	};

	const dispatch = createEventDispatcher();
	const batchSelectedIds = writable(false);
	const tableSortable = writable(sortable);

	const sortHeader = writable({
		id: null,
		key: null,
		sort: undefined,
		sortDirection: "none"
	});

	component_subscribe($$self, sortHeader, value => $$invalidate(15, $sortHeader = value));
	const headerItems = writable([]);
	component_subscribe($$self, headerItems, value => $$invalidate(49, $headerItems = value));
	const thKeys = derived(headerItems, () => headers.map(({ key }, i) => ({ key, id: $headerItems[i] })).reduce((a, c) => ({ ...a, [c.key]: c.id }), {}));
	component_subscribe($$self, thKeys, value => $$invalidate(24, $thKeys = value));

	setContext("DataTable", {
		sortHeader,
		tableSortable,
		batchSelectedIds,
		resetSelectedRowIds: () => {
			$$invalidate(19, selectAll = false);
			$$invalidate(2, selectedRowIds = []);
			if (refSelectAll) $$invalidate(20, refSelectAll.checked = false, refSelectAll);
		},
		add: id => {
			headerItems.update(_ => [..._, id]);
		}
	});

	let expanded = false;
	let parentRowId = null;
	let selectAll = false;
	let refSelectAll = null;

	const click_handler = () => {
		$$invalidate(17, expanded = !expanded);
		$$invalidate(1, expandedRowIds = expanded ? rows.map(row => row.id) : []);
		dispatch("click:header--expand", { expanded });
	};

	function inlinecheckbox_ref_binding(value) {
		refSelectAll = value;
		$$invalidate(20, refSelectAll);
	}

	const change_handler = e => {
		if (indeterminate) {
			e.target.checked = false;
			$$invalidate(19, selectAll = false);
			$$invalidate(2, selectedRowIds = []);
			return;
		}

		if (e.target.checked) {
			$$invalidate(2, selectedRowIds = rows.map(row => row.id));
		} else {
			$$invalidate(2, selectedRowIds = []);
		}
	};

	const click_handler_1 = header => {
		dispatch("click", { header });
		let active = header.key === $sortHeader.key;
		let currentSortDirection = active ? $sortHeader.sortDirection : "none";
		let sortDirection = sortDirectionMap[currentSortDirection];
		dispatch("click:header", { header, sortDirection });

		sortHeader.set({
			id: sortDirection === "none" ? null : $thKeys[header.key],
			key: header.key,
			sort: header.sort,
			sortDirection
		});
	};

	const click_handler_2 = row => {
		const rowExpanded = !!expandedRows[row.id];

		$$invalidate(1, expandedRowIds = rowExpanded
		? expandedRowIds.filter(id => id !== row.id)
		: [...expandedRowIds, row.id]);

		dispatch("click:row--expand", { row, expanded: !rowExpanded });
	};

	const change_handler_1 = row => {
		$$invalidate(2, selectedRowIds = [row.id]);
	};

	const change_handler_2 = row => {
		if (selectedRowIds.includes(row.id)) {
			$$invalidate(2, selectedRowIds = selectedRowIds.filter(id => id !== row.id));
		} else {
			$$invalidate(2, selectedRowIds = [...selectedRowIds, row.id]);
		}
	};

	const click_handler_3 = (row, cell) => {
		dispatch("click", { row, cell });
		dispatch("click:cell", cell);
	};

	const click_handler_4 = row => {
		dispatch("click", { row });
		dispatch("click:row", row);
	};

	const mouseenter_handler = row => {
		dispatch("mouseenter:row", row);
	};

	const mouseleave_handler = row => {
		dispatch("mouseleave:row", row);
	};

	const mouseenter_handler_1 = row => {
		$$invalidate(18, parentRowId = row.id);
	};

	const mouseleave_handler_1 = () => {
		$$invalidate(18, parentRowId = null);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(30, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("headers" in $$new_props) $$invalidate(5, headers = $$new_props.headers);
		if ("rows" in $$new_props) $$invalidate(0, rows = $$new_props.rows);
		if ("size" in $$new_props) $$invalidate(6, size = $$new_props.size);
		if ("title" in $$new_props) $$invalidate(7, title = $$new_props.title);
		if ("description" in $$new_props) $$invalidate(8, description = $$new_props.description);
		if ("zebra" in $$new_props) $$invalidate(9, zebra = $$new_props.zebra);
		if ("sortable" in $$new_props) $$invalidate(10, sortable = $$new_props.sortable);
		if ("expandable" in $$new_props) $$invalidate(3, expandable = $$new_props.expandable);
		if ("batchExpansion" in $$new_props) $$invalidate(11, batchExpansion = $$new_props.batchExpansion);
		if ("expandedRowIds" in $$new_props) $$invalidate(1, expandedRowIds = $$new_props.expandedRowIds);
		if ("radio" in $$new_props) $$invalidate(12, radio = $$new_props.radio);
		if ("selectable" in $$new_props) $$invalidate(4, selectable = $$new_props.selectable);
		if ("batchSelection" in $$new_props) $$invalidate(13, batchSelection = $$new_props.batchSelection);
		if ("selectedRowIds" in $$new_props) $$invalidate(2, selectedRowIds = $$new_props.selectedRowIds);
		if ("stickyHeader" in $$new_props) $$invalidate(14, stickyHeader = $$new_props.stickyHeader);
		if ("$$scope" in $$new_props) $$invalidate(48, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*expandedRowIds*/ 2) {
			 $$invalidate(21, expandedRows = expandedRowIds.reduce((a, id) => ({ ...a, [id]: true }), {}));
		}

		if ($$self.$$.dirty[0] & /*selectedRowIds*/ 4) {
			 batchSelectedIds.set(selectedRowIds);
		}

		if ($$self.$$.dirty[0] & /*headers*/ 32) {
			 $$invalidate(31, headerKeys = headers.map(({ key }) => key));
		}

		if ($$self.$$.dirty[0] & /*rows*/ 1 | $$self.$$.dirty[1] & /*headerKeys*/ 1) {
			 $$invalidate(0, rows = rows.map(row => ({
				...row,
				cells: headerKeys.map(key => ({ key, value: row[key] }))
			})));
		}

		if ($$self.$$.dirty[0] & /*selectedRowIds, rows*/ 5) {
			 $$invalidate(22, indeterminate = selectedRowIds.length > 0 && selectedRowIds.length < rows.length);
		}

		if ($$self.$$.dirty[0] & /*batchExpansion*/ 2048) {
			 if (batchExpansion) $$invalidate(3, expandable = true);
		}

		if ($$self.$$.dirty[0] & /*radio, batchSelection*/ 12288) {
			 if (radio || batchSelection) $$invalidate(4, selectable = true);
		}

		if ($$self.$$.dirty[0] & /*sortable*/ 1024) {
			 tableSortable.set(sortable);
		}

		if ($$self.$$.dirty[0] & /*rows*/ 1) {
			 $$invalidate(23, sortedRows = rows);
		}

		if ($$self.$$.dirty[0] & /*$sortHeader*/ 32768) {
			 $$invalidate(32, ascending = $sortHeader.sortDirection === "ascending");
		}

		if ($$self.$$.dirty[0] & /*$sortHeader*/ 32768) {
			 $$invalidate(33, sortKey = $sortHeader.key);
		}

		if ($$self.$$.dirty[0] & /*sortable*/ 1024 | $$self.$$.dirty[1] & /*sortKey*/ 4) {
			 $$invalidate(16, sorting = sortable && sortKey != null);
		}

		if ($$self.$$.dirty[0] & /*sorting, $sortHeader, rows*/ 98305 | $$self.$$.dirty[1] & /*ascending, sortKey*/ 6) {
			 if (sorting) {
				if ($sortHeader.sortDirection === "none") {
					$$invalidate(23, sortedRows = rows);
				} else {
					$$invalidate(23, sortedRows = [...rows].sort((a, b) => {
						const itemA = ascending ? a[sortKey] : b[sortKey];
						const itemB = ascending ? b[sortKey] : a[sortKey];
						if ($sortHeader.sort) return $sortHeader.sort(itemA, itemB);
						if (typeof itemA === "number" && typeof itemB === "number") return itemA - itemB;
						return itemA.toString().localeCompare(itemB.toString(), "en", { numeric: true });
					}));
				}
			}
		}
	};

	return [
		rows,
		expandedRowIds,
		selectedRowIds,
		expandable,
		selectable,
		headers,
		size,
		title,
		description,
		zebra,
		sortable,
		batchExpansion,
		radio,
		batchSelection,
		stickyHeader,
		$sortHeader,
		sorting,
		expanded,
		parentRowId,
		selectAll,
		refSelectAll,
		expandedRows,
		indeterminate,
		sortedRows,
		$thKeys,
		sortDirectionMap,
		dispatch,
		sortHeader,
		headerItems,
		thKeys,
		$$restProps,
		headerKeys,
		ascending,
		sortKey,
		slots,
		click_handler,
		inlinecheckbox_ref_binding,
		change_handler,
		click_handler_1,
		click_handler_2,
		change_handler_1,
		change_handler_2,
		click_handler_3,
		click_handler_4,
		mouseenter_handler,
		mouseleave_handler,
		mouseenter_handler_1,
		mouseleave_handler_1,
		$$scope
	];
}

class DataTable extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$g,
			create_fragment$g,
			safe_not_equal,
			{
				headers: 5,
				rows: 0,
				size: 6,
				title: 7,
				description: 8,
				zebra: 9,
				sortable: 10,
				expandable: 3,
				batchExpansion: 11,
				expandedRowIds: 1,
				radio: 12,
				selectable: 4,
				batchSelection: 13,
				selectedRowIds: 2,
				stickyHeader: 14
			},
			[-1, -1]
		);
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/Toolbar.svelte generated by Svelte v3.31.2 */

function create_fragment$h(ctx) {
	let section;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let section_levels = [{ "aria-label": "data table toolbar" }, /*$$restProps*/ ctx[2]];
	let section_data = {};

	for (let i = 0; i < section_levels.length; i += 1) {
		section_data = assign(section_data, section_levels[i]);
	}

	return {
		c() {
			section = element("section");
			if (default_slot) default_slot.c();
			set_attributes(section, section_data);
			toggle_class(section, "bx--table-toolbar", true);
			toggle_class(section, "bx--table-toolbar--small", /*size*/ ctx[0] === "sm");
			toggle_class(section, "bx--table-toolbar--normal", /*size*/ ctx[0] === "default");
		},
		m(target, anchor) {
			insert(target, section, anchor);

			if (default_slot) {
				default_slot.m(section, null);
			}

			/*section_binding*/ ctx[5](section);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(section, section_data = get_spread_update(section_levels, [
				{ "aria-label": "data table toolbar" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(section, "bx--table-toolbar", true);
			toggle_class(section, "bx--table-toolbar--small", /*size*/ ctx[0] === "sm");
			toggle_class(section, "bx--table-toolbar--normal", /*size*/ ctx[0] === "default");
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (default_slot) default_slot.d(detaching);
			/*section_binding*/ ctx[5](null);
		}
	};
}

function instance$h($$self, $$props, $$invalidate) {
	const omit_props_names = ["size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = "default" } = $$props;
	let ref = null;
	const overflowVisible = writable(false);

	setContext("Toolbar", {
		overflowVisible,
		setOverflowVisible: visible => {
			overflowVisible.set(visible);
			if (ref) $$invalidate(1, ref.style.overflow = visible ? "visible" : "inherit", ref);
		}
	});

	function section_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [size, ref, $$restProps, $$scope, slots, section_binding];
}

class Toolbar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$h, create_fragment$h, safe_not_equal, { size: 0 });
	}
}

/* node_modules/carbon-components-svelte/src/DataTable/ToolbarContent.svelte generated by Svelte v3.31.2 */

function create_fragment$i(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--toolbar-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$i($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class ToolbarContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});
	}
}

/* node_modules/carbon-components-svelte/src/Form/Form.svelte generated by Svelte v3.31.2 */

function create_fragment$j(ctx) {
	let form;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let form_levels = [/*$$restProps*/ ctx[0]];
	let form_data = {};

	for (let i = 0; i < form_levels.length; i += 1) {
		form_data = assign(form_data, form_levels[i]);
	}

	return {
		c() {
			form = element("form");
			if (default_slot) default_slot.c();
			set_attributes(form, form_data);
			toggle_class(form, "bx--form", true);
		},
		m(target, anchor) {
			insert(target, form, anchor);

			if (default_slot) {
				default_slot.m(form, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(form, "click", /*click_handler*/ ctx[3]),
					listen(form, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(form, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(form, "mouseleave", /*mouseleave_handler*/ ctx[6]),
					listen(form, "submit", prevent_default(/*submit_handler*/ ctx[7]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(form, form_data = get_spread_update(form_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(form, "bx--form", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$j($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function submit_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		submit_handler
	];
}

class Form extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});
	}
}

/* node_modules/carbon-components-svelte/src/Modal/Modal.svelte generated by Svelte v3.31.2 */
const get_heading_slot_changes = dirty => ({});
const get_heading_slot_context = ctx => ({});
const get_label_slot_changes = dirty => ({});
const get_label_slot_context = ctx => ({});

// (171:6) {#if passiveModal}
function create_if_block_4$2(ctx) {
	let button;
	let close20;
	let current;
	let mounted;
	let dispose;

	close20 = new Close20({
			props: {
				"aria-label": /*iconDescription*/ ctx[7],
				class: "bx--modal-close__icon"
			}
		});

	return {
		c() {
			button = element("button");
			create_component(close20.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			attr(button, "title", /*iconDescription*/ ctx[7]);
			attr(button, "class", "bx--modal-close");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(close20, button, null);
			/*button_binding*/ ctx[35](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_1*/ ctx[36]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			const close20_changes = {};
			if (dirty[0] & /*iconDescription*/ 128) close20_changes["aria-label"] = /*iconDescription*/ ctx[7];
			close20.$set(close20_changes);

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			}

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "title", /*iconDescription*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(close20);
			/*button_binding*/ ctx[35](null);
			mounted = false;
			dispose();
		}
	};
}

// (188:6) {#if modalLabel}
function create_if_block_3$2(ctx) {
	let h2;
	let current;
	const label_slot_template = /*#slots*/ ctx[29].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[46], get_label_slot_context);
	const label_slot_or_fallback = label_slot || fallback_block_1$1(ctx);

	return {
		c() {
			h2 = element("h2");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr(h2, "id", /*modalLabelId*/ ctx[21]);
			toggle_class(h2, "bx--modal-header__label", true);
		},
		m(target, anchor) {
			insert(target, h2, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(h2, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && dirty[1] & /*$$scope*/ 32768) {
					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[46], dirty, get_label_slot_changes, get_label_slot_context);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && dirty[0] & /*modalLabel*/ 64) {
					label_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*modalLabelId*/ 2097152) {
				attr(h2, "id", /*modalLabelId*/ ctx[21]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h2);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};
}

// (190:29) {modalLabel}
function fallback_block_1$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*modalLabel*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*modalLabel*/ 64) set_data(t, /*modalLabel*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (194:29) {modalHeading}
function fallback_block$6(ctx) {
	let t;

	return {
		c() {
			t = text(/*modalHeading*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*modalHeading*/ 32) set_data(t, /*modalHeading*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (196:6) {#if !passiveModal}
function create_if_block_2$2(ctx) {
	let button;
	let close20;
	let current;
	let mounted;
	let dispose;

	close20 = new Close20({
			props: {
				"aria-label": /*iconDescription*/ ctx[7],
				class: "bx--modal-close__icon"
			}
		});

	return {
		c() {
			button = element("button");
			create_component(close20.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			attr(button, "title", /*iconDescription*/ ctx[7]);
			toggle_class(button, "bx--modal-close", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(close20, button, null);
			/*button_binding_1*/ ctx[37](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_2*/ ctx[38]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			const close20_changes = {};
			if (dirty[0] & /*iconDescription*/ 128) close20_changes["aria-label"] = /*iconDescription*/ ctx[7];
			close20.$set(close20_changes);

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			}

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "title", /*iconDescription*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(close20);
			/*button_binding_1*/ ctx[37](null);
			mounted = false;
			dispose();
		}
	};
}

// (226:4) {#if hasScrollingContent}
function create_if_block_1$2(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			toggle_class(div, "bx--modal-content--overflow-indicator", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (229:4) {#if !passiveModal}
function create_if_block$b(ctx) {
	let div;
	let button0;
	let t;
	let button1;
	let current;

	button0 = new Button({
			props: {
				kind: "secondary",
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*click_handler_3*/ ctx[39]);

	button1 = new Button({
			props: {
				kind: /*danger*/ ctx[3] ? "danger" : "primary",
				disabled: /*primaryButtonDisabled*/ ctx[11],
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*click_handler_4*/ ctx[40]);

	return {
		c() {
			div = element("div");
			create_component(button0.$$.fragment);
			t = space();
			create_component(button1.$$.fragment);
			toggle_class(div, "bx--modal-footer", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(button0, div, null);
			append(div, t);
			mount_component(button1, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const button0_changes = {};

			if (dirty[0] & /*secondaryButtonText*/ 8192 | dirty[1] & /*$$scope*/ 32768) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty[0] & /*danger*/ 8) button1_changes.kind = /*danger*/ ctx[3] ? "danger" : "primary";
			if (dirty[0] & /*primaryButtonDisabled*/ 2048) button1_changes.disabled = /*primaryButtonDisabled*/ ctx[11];

			if (dirty[0] & /*primaryButtonText*/ 1024 | dirty[1] & /*$$scope*/ 32768) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(button0);
			destroy_component(button1);
		}
	};
}

// (231:8) <Button           kind="secondary"           on:click="{() => {             dispatch('click:button--secondary');           }}"         >
function create_default_slot_1$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*secondaryButtonText*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*secondaryButtonText*/ 8192) set_data(t, /*secondaryButtonText*/ ctx[13]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (239:8) <Button           kind="{danger ? 'danger' : 'primary'}"           disabled="{primaryButtonDisabled}"           on:click="{() => {             dispatch('submit');           }}"         >
function create_default_slot$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*primaryButtonText*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*primaryButtonText*/ 1024) set_data(t, /*primaryButtonText*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$k(ctx) {
	let div3;
	let div2;
	let div0;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let div1;
	let div1_tabindex_value;
	let div1_role_value;
	let div1_aria_label_value;
	let div1_aria_labelledby_value;
	let t4;
	let t5;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*passiveModal*/ ctx[4] && create_if_block_4$2(ctx);
	let if_block1 = /*modalLabel*/ ctx[6] && create_if_block_3$2(ctx);
	const heading_slot_template = /*#slots*/ ctx[29].heading;
	const heading_slot = create_slot(heading_slot_template, ctx, /*$$scope*/ ctx[46], get_heading_slot_context);
	const heading_slot_or_fallback = heading_slot || fallback_block$6(ctx);
	let if_block2 = !/*passiveModal*/ ctx[4] && create_if_block_2$2(ctx);
	const default_slot_template = /*#slots*/ ctx[29].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[46], null);
	let if_block3 = /*hasScrollingContent*/ ctx[9] && create_if_block_1$2();
	let if_block4 = !/*passiveModal*/ ctx[4] && create_if_block$b(ctx);

	let div2_levels = [
		{ role: "dialog" },
		/*alertDialogProps*/ ctx[20],
		{ "aria-modal": "true" },
		{ "aria-label": /*ariaLabel*/ ctx[23] }
	];

	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	let div3_levels = [
		{ role: "presentation" },
		{ tabindex: "-1" },
		{ id: /*id*/ ctx[15] },
		/*$$restProps*/ ctx[25]
	];

	let div3_data = {};

	for (let i = 0; i < div3_levels.length; i += 1) {
		div3_data = assign(div3_data, div3_levels[i]);
	}

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			h3 = element("h3");
			if (heading_slot_or_fallback) heading_slot_or_fallback.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			attr(h3, "id", /*modalHeadingId*/ ctx[22]);
			toggle_class(h3, "bx--modal-header__heading", true);
			toggle_class(div0, "bx--modal-header", true);
			attr(div1, "id", /*modalBodyId*/ ctx[16]);
			attr(div1, "tabindex", div1_tabindex_value = /*hasScrollingContent*/ ctx[9] ? "0" : undefined);
			attr(div1, "role", div1_role_value = /*hasScrollingContent*/ ctx[9] ? "region" : undefined);

			attr(div1, "aria-label", div1_aria_label_value = /*hasScrollingContent*/ ctx[9]
			? /*ariaLabel*/ ctx[23]
			: undefined);

			attr(div1, "aria-labelledby", div1_aria_labelledby_value = /*modalLabel*/ ctx[6]
			? /*modalLabelId*/ ctx[21]
			: /*modalHeadingId*/ ctx[22]);

			toggle_class(div1, "bx--modal-content", true);
			toggle_class(div1, "bx--modal-content--with-form", /*hasForm*/ ctx[8]);
			toggle_class(div1, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[9]);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--modal-container", true);
			toggle_class(div2, "bx--modal-container--xs", /*size*/ ctx[2] === "xs");
			toggle_class(div2, "bx--modal-container--sm", /*size*/ ctx[2] === "sm");
			toggle_class(div2, "bx--modal-container--lg", /*size*/ ctx[2] === "lg");
			set_attributes(div3, div3_data);
			toggle_class(div3, "bx--modal", true);
			toggle_class(div3, "bx--modal-tall", !/*passiveModal*/ ctx[4]);
			toggle_class(div3, "is-visible", /*open*/ ctx[0]);
			toggle_class(div3, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, h3);

			if (heading_slot_or_fallback) {
				heading_slot_or_fallback.m(h3, null);
			}

			append(div0, t2);
			if (if_block2) if_block2.m(div0, null);
			append(div2, t3);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div2, t4);
			if (if_block3) if_block3.m(div2, null);
			append(div2, t5);
			if (if_block4) if_block4.m(div2, null);
			/*div2_binding*/ ctx[41](div2);
			/*div3_binding*/ ctx[43](div3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div2, "click", /*click_handler_5*/ ctx[42]),
					listen(div3, "keydown", /*keydown_handler*/ ctx[30]),
					listen(div3, "keydown", /*keydown_handler_1*/ ctx[44]),
					listen(div3, "click", /*click_handler*/ ctx[31]),
					listen(div3, "click", /*click_handler_6*/ ctx[45]),
					listen(div3, "mouseover", /*mouseover_handler*/ ctx[32]),
					listen(div3, "mouseenter", /*mouseenter_handler*/ ctx[33]),
					listen(div3, "mouseleave", /*mouseleave_handler*/ ctx[34])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*passiveModal*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*modalLabel*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*modalLabel*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (heading_slot) {
				if (heading_slot.p && dirty[1] & /*$$scope*/ 32768) {
					update_slot(heading_slot, heading_slot_template, ctx, /*$$scope*/ ctx[46], dirty, get_heading_slot_changes, get_heading_slot_context);
				}
			} else {
				if (heading_slot_or_fallback && heading_slot_or_fallback.p && dirty[0] & /*modalHeading*/ 32) {
					heading_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*modalHeadingId*/ 4194304) {
				attr(h3, "id", /*modalHeadingId*/ ctx[22]);
			}

			if (!/*passiveModal*/ ctx[4]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 16) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2$2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty[1] & /*$$scope*/ 32768) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[46], dirty, null, null);
				}
			}

			if (!current || dirty[0] & /*modalBodyId*/ 65536) {
				attr(div1, "id", /*modalBodyId*/ ctx[16]);
			}

			if (!current || dirty[0] & /*hasScrollingContent*/ 512 && div1_tabindex_value !== (div1_tabindex_value = /*hasScrollingContent*/ ctx[9] ? "0" : undefined)) {
				attr(div1, "tabindex", div1_tabindex_value);
			}

			if (!current || dirty[0] & /*hasScrollingContent*/ 512 && div1_role_value !== (div1_role_value = /*hasScrollingContent*/ ctx[9] ? "region" : undefined)) {
				attr(div1, "role", div1_role_value);
			}

			if (!current || dirty[0] & /*hasScrollingContent, ariaLabel*/ 8389120 && div1_aria_label_value !== (div1_aria_label_value = /*hasScrollingContent*/ ctx[9]
			? /*ariaLabel*/ ctx[23]
			: undefined)) {
				attr(div1, "aria-label", div1_aria_label_value);
			}

			if (!current || dirty[0] & /*modalLabel, modalLabelId, modalHeadingId*/ 6291520 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = /*modalLabel*/ ctx[6]
			? /*modalLabelId*/ ctx[21]
			: /*modalHeadingId*/ ctx[22])) {
				attr(div1, "aria-labelledby", div1_aria_labelledby_value);
			}

			if (dirty[0] & /*hasForm*/ 256) {
				toggle_class(div1, "bx--modal-content--with-form", /*hasForm*/ ctx[8]);
			}

			if (dirty[0] & /*hasScrollingContent*/ 512) {
				toggle_class(div1, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[9]);
			}

			if (/*hasScrollingContent*/ ctx[9]) {
				if (if_block3) ; else {
					if_block3 = create_if_block_1$2();
					if_block3.c();
					if_block3.m(div2, t5);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!/*passiveModal*/ ctx[4]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 16) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block$b(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div2, null);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				{ role: "dialog" },
				dirty[0] & /*alertDialogProps*/ 1048576 && /*alertDialogProps*/ ctx[20],
				{ "aria-modal": "true" },
				(!current || dirty[0] & /*ariaLabel*/ 8388608) && { "aria-label": /*ariaLabel*/ ctx[23] }
			]));

			toggle_class(div2, "bx--modal-container", true);
			toggle_class(div2, "bx--modal-container--xs", /*size*/ ctx[2] === "xs");
			toggle_class(div2, "bx--modal-container--sm", /*size*/ ctx[2] === "sm");
			toggle_class(div2, "bx--modal-container--lg", /*size*/ ctx[2] === "lg");

			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
				{ role: "presentation" },
				{ tabindex: "-1" },
				(!current || dirty[0] & /*id*/ 32768) && { id: /*id*/ ctx[15] },
				dirty[0] & /*$$restProps*/ 33554432 && /*$$restProps*/ ctx[25]
			]));

			toggle_class(div3, "bx--modal", true);
			toggle_class(div3, "bx--modal-tall", !/*passiveModal*/ ctx[4]);
			toggle_class(div3, "is-visible", /*open*/ ctx[0]);
			toggle_class(div3, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(heading_slot_or_fallback, local);
			transition_in(if_block2);
			transition_in(default_slot, local);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(heading_slot_or_fallback, local);
			transition_out(if_block2);
			transition_out(default_slot, local);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (heading_slot_or_fallback) heading_slot_or_fallback.d(detaching);
			if (if_block2) if_block2.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			/*div2_binding*/ ctx[41](null);
			/*div3_binding*/ ctx[43](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$k($$self, $$props, $$invalidate) {
	let modalLabelId;
	let modalHeadingId;
	let modalBodyId;
	let ariaLabel;

	const omit_props_names = [
		"size","open","danger","alert","passiveModal","modalHeading","modalLabel","modalAriaLabel","iconDescription","hasForm","hasScrollingContent","primaryButtonText","primaryButtonDisabled","shouldSubmitOnEnter","secondaryButtonText","selectorPrimaryFocus","preventCloseOnClickOutside","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { open = false } = $$props;
	let { danger = false } = $$props;
	let { alert = false } = $$props;
	let { passiveModal = false } = $$props;
	let { modalHeading = undefined } = $$props;
	let { modalLabel = undefined } = $$props;
	let { modalAriaLabel = undefined } = $$props;
	let { iconDescription = "Close the modal" } = $$props;
	let { hasForm = false } = $$props;
	let { hasScrollingContent = false } = $$props;
	let { primaryButtonText = "" } = $$props;
	let { primaryButtonDisabled = false } = $$props;
	let { shouldSubmitOnEnter = true } = $$props;
	let { secondaryButtonText = "" } = $$props;
	let { selectorPrimaryFocus = "[data-modal-primary-focus]" } = $$props;
	let { preventCloseOnClickOutside = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let buttonRef = null;
	let innerModal = null;
	let opened = false;
	let didClickInnerModal = false;

	function focus(element) {
		const node = (element || innerModal).querySelector(selectorPrimaryFocus) || buttonRef;
		node.focus();
	}

	onMount(() => {
		return () => {
			document.body.classList.remove("bx--body--with-modal-open");
		};
	});

	afterUpdate(() => {
		if (opened) {
			if (!open) {
				opened = false;
				dispatch("close");
				document.body.classList.remove("bx--body--with-modal-open");
			}
		} else if (open) {
			opened = true;
			focus();
			dispatch("open");
			document.body.classList.add("bx--body--with-modal-open");
		}
	});

	let alertDialogProps = {};

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			buttonRef = $$value;
			$$invalidate(17, buttonRef);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(0, open = false);
	};

	function button_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			buttonRef = $$value;
			$$invalidate(17, buttonRef);
		});
	}

	const click_handler_2 = () => {
		$$invalidate(0, open = false);
	};

	const click_handler_3 = () => {
		dispatch("click:button--secondary");
	};

	const click_handler_4 = () => {
		dispatch("submit");
	};

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			innerModal = $$value;
			$$invalidate(18, innerModal);
		});
	}

	const click_handler_5 = () => {
		$$invalidate(19, didClickInnerModal = true);
	};

	function div3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler_1 = ({ key }) => {
		if (open) {
			if (key === "Escape") {
				$$invalidate(0, open = false);
			} else if (shouldSubmitOnEnter && key === "Enter") {
				dispatch("submit");
			}
		}
	};

	const click_handler_6 = () => {
		if (!didClickInnerModal && !preventCloseOnClickOutside) $$invalidate(0, open = false);
		$$invalidate(19, didClickInnerModal = false);
	};

	$$self.$$set = $$new_props => {
		$$invalidate(49, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("danger" in $$new_props) $$invalidate(3, danger = $$new_props.danger);
		if ("alert" in $$new_props) $$invalidate(26, alert = $$new_props.alert);
		if ("passiveModal" in $$new_props) $$invalidate(4, passiveModal = $$new_props.passiveModal);
		if ("modalHeading" in $$new_props) $$invalidate(5, modalHeading = $$new_props.modalHeading);
		if ("modalLabel" in $$new_props) $$invalidate(6, modalLabel = $$new_props.modalLabel);
		if ("modalAriaLabel" in $$new_props) $$invalidate(27, modalAriaLabel = $$new_props.modalAriaLabel);
		if ("iconDescription" in $$new_props) $$invalidate(7, iconDescription = $$new_props.iconDescription);
		if ("hasForm" in $$new_props) $$invalidate(8, hasForm = $$new_props.hasForm);
		if ("hasScrollingContent" in $$new_props) $$invalidate(9, hasScrollingContent = $$new_props.hasScrollingContent);
		if ("primaryButtonText" in $$new_props) $$invalidate(10, primaryButtonText = $$new_props.primaryButtonText);
		if ("primaryButtonDisabled" in $$new_props) $$invalidate(11, primaryButtonDisabled = $$new_props.primaryButtonDisabled);
		if ("shouldSubmitOnEnter" in $$new_props) $$invalidate(12, shouldSubmitOnEnter = $$new_props.shouldSubmitOnEnter);
		if ("secondaryButtonText" in $$new_props) $$invalidate(13, secondaryButtonText = $$new_props.secondaryButtonText);
		if ("selectorPrimaryFocus" in $$new_props) $$invalidate(28, selectorPrimaryFocus = $$new_props.selectorPrimaryFocus);
		if ("preventCloseOnClickOutside" in $$new_props) $$invalidate(14, preventCloseOnClickOutside = $$new_props.preventCloseOnClickOutside);
		if ("id" in $$new_props) $$invalidate(15, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(46, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 32768) {
			 $$invalidate(21, modalLabelId = `bx--modal-header__label--modal-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 32768) {
			 $$invalidate(22, modalHeadingId = `bx--modal-header__heading--modal-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 32768) {
			 $$invalidate(16, modalBodyId = `bx--modal-body--${id}`);
		}

		 $$invalidate(23, ariaLabel = modalLabel || $$props["aria-label"] || modalAriaLabel || modalHeading);

		if ($$self.$$.dirty[0] & /*alert, passiveModal, modalBodyId*/ 67174416) {
			 if (alert) {
				if (passiveModal) {
					$$invalidate(20, alertDialogProps.role = "alert", alertDialogProps);
				}

				if (!passiveModal) {
					$$invalidate(20, alertDialogProps.role = "alertdialog", alertDialogProps);
					$$invalidate(20, alertDialogProps["aria-describedby"] = modalBodyId, alertDialogProps);
				}
			}
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		ref,
		size,
		danger,
		passiveModal,
		modalHeading,
		modalLabel,
		iconDescription,
		hasForm,
		hasScrollingContent,
		primaryButtonText,
		primaryButtonDisabled,
		shouldSubmitOnEnter,
		secondaryButtonText,
		preventCloseOnClickOutside,
		id,
		modalBodyId,
		buttonRef,
		innerModal,
		didClickInnerModal,
		alertDialogProps,
		modalLabelId,
		modalHeadingId,
		ariaLabel,
		dispatch,
		$$restProps,
		alert,
		modalAriaLabel,
		selectorPrimaryFocus,
		slots,
		keydown_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		button_binding,
		click_handler_1,
		button_binding_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		div2_binding,
		click_handler_5,
		div3_binding,
		keydown_handler_1,
		click_handler_6,
		$$scope
	];
}

class Modal extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$k,
			create_fragment$k,
			safe_not_equal,
			{
				size: 2,
				open: 0,
				danger: 3,
				alert: 26,
				passiveModal: 4,
				modalHeading: 5,
				modalLabel: 6,
				modalAriaLabel: 27,
				iconDescription: 7,
				hasForm: 8,
				hasScrollingContent: 9,
				primaryButtonText: 10,
				primaryButtonDisabled: 11,
				shouldSubmitOnEnter: 12,
				secondaryButtonText: 13,
				selectorPrimaryFocus: 28,
				preventCloseOnClickOutside: 14,
				id: 15,
				ref: 1
			},
			[-1, -1]
		);
	}
}

/* node_modules/carbon-components-svelte/src/Notification/NotificationButton.svelte generated by Svelte v3.31.2 */

function create_fragment$l(ctx) {
	let button;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*renderIcon*/ ctx[1];

	function switch_props(ctx) {
		return {
			props: {
				title: /*title*/ ctx[2],
				class: "" + ((/*notificationType*/ ctx[0] === "toast" && "bx--toast-notification__close-icon") + "\n      " + (/*notificationType*/ ctx[0] === "inline" && "bx--inline-notification__close-icon"))
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [
		{ type: "button" },
		{ "aria-label": /*iconDescription*/ ctx[3] },
		{ title: /*iconDescription*/ ctx[3] },
		/*$$restProps*/ ctx[4]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
			toggle_class(button, "bx--toast-notification__close-button", /*notificationType*/ ctx[0] === "toast");
			toggle_class(button, "bx--inline-notification__close-button", /*notificationType*/ ctx[0] === "inline");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[5]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*title*/ 4) switch_instance_changes.title = /*title*/ ctx[2];
			if (dirty & /*notificationType*/ 1) switch_instance_changes.class = "" + ((/*notificationType*/ ctx[0] === "toast" && "bx--toast-notification__close-icon") + "\n      " + (/*notificationType*/ ctx[0] === "inline" && "bx--inline-notification__close-icon"));

			if (switch_value !== (switch_value = /*renderIcon*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*iconDescription*/ 8) && { "aria-label": /*iconDescription*/ ctx[3] },
				(!current || dirty & /*iconDescription*/ 8) && { title: /*iconDescription*/ ctx[3] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(button, "bx--toast-notification__close-button", /*notificationType*/ ctx[0] === "toast");
			toggle_class(button, "bx--inline-notification__close-button", /*notificationType*/ ctx[0] === "inline");
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (switch_instance) destroy_component(switch_instance);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$l($$self, $$props, $$invalidate) {
	const omit_props_names = ["notificationType","renderIcon","title","iconDescription"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { notificationType = "toast" } = $$props;
	let { renderIcon = Close20 } = $$props;
	let { title = undefined } = $$props;
	let { iconDescription = "Close icon" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("notificationType" in $$new_props) $$invalidate(0, notificationType = $$new_props.notificationType);
		if ("renderIcon" in $$new_props) $$invalidate(1, renderIcon = $$new_props.renderIcon);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("iconDescription" in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
	};

	return [
		notificationType,
		renderIcon,
		title,
		iconDescription,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class NotificationButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
			notificationType: 0,
			renderIcon: 1,
			title: 2,
			iconDescription: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/CheckmarkFilled20/CheckmarkFilled20.svelte generated by Svelte v3.31.2 */

function create_if_block$c(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$7(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$c(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$c(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$m(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$7(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "CheckmarkFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M10,1c-4.9,0-9,4.1-9,9s4.1,9,9,9s9-4,9-9S15,1,10,1z M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
			attr(path1, "fill", "none");
			attr(path1, "d", "M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "CheckmarkFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$m($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class CheckmarkFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/ErrorFilled20/ErrorFilled20.svelte generated by Svelte v3.31.2 */

function create_if_block$d(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$8(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$d(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$d(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$n(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$8(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ErrorFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
			attr(path1, "d", "M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ErrorFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$n($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ErrorFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/InformationFilled20/InformationFilled20.svelte generated by Svelte v3.31.2 */

function create_if_block$e(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$9(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$e(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$e(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$o(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$9(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "InformationFilled20"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,13.875H17.125v-8H13v2.25h1.875v5.75H12v2.25h8Z");
			attr(path1, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,6a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,16.125H12v-2.25h2.875v-5.75H13v-2.25h4.125v8H20Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "InformationFilled20"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$o($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class InformationFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/InformationSquareFilled20/InformationSquareFilled20.svelte generated by Svelte v3.31.2 */

function create_if_block$f(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$a(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$f(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$f(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$p(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$a(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "InformationSquareFilled20"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,13.875H17.125v-8H13v2.25h1.875v5.75H12v2.25h8Z");
			attr(path1, "d", "M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,16.125H12v-2.25h2.875v-5.75H13v-2.25h4.125v8H20Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "InformationSquareFilled20"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$p($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class InformationSquareFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$p, create_fragment$p, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/WarningFilled20/WarningFilled20.svelte generated by Svelte v3.31.2 */

function create_if_block$g(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$b(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$g(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$g(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$q(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$b(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1\ts1,0.4,1,1S10.6,16,10,16z");
			attr(path1, "d", "M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1s1,0.4,1,1S10.6,16,10,16z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$q($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$q, create_fragment$q, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/WarningAltFilled20/WarningAltFilled20.svelte generated by Svelte v3.31.2 */

function create_if_block$h(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$c(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$h(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$h(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$r(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$c(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningAltFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M14.875,11h2.25V21h-2.25ZM16,27a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,27Z");
			attr(path1, "d", "M29.8872,28.5386l-13-25a1,1,0,0,0-1.7744,0l-13,25A1,1,0,0,0,3,30H29a1,1,0,0,0,.8872-1.4614ZM14.875,11h2.25V21h-2.25ZM16,27a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,27Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningAltFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$r($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningAltFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$r, create_fragment$r, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-components-svelte/src/Notification/NotificationIcon.svelte generated by Svelte v3.31.2 */

function create_fragment$s(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icons*/ ctx[3][/*kind*/ ctx[0]];

	function switch_props(ctx) {
		return {
			props: {
				title: /*iconDescription*/ ctx[2],
				class: "bx--" + /*notificationType*/ ctx[1] + "-notification__icon"
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*iconDescription*/ 4) switch_instance_changes.title = /*iconDescription*/ ctx[2];
			if (dirty & /*notificationType*/ 2) switch_instance_changes.class = "bx--" + /*notificationType*/ ctx[1] + "-notification__icon";

			if (switch_value !== (switch_value = /*icons*/ ctx[3][/*kind*/ ctx[0]])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function instance$s($$self, $$props, $$invalidate) {
	let { kind = "error" } = $$props;
	let { notificationType = "toast" } = $$props;
	let { iconDescription = "Closes notification" } = $$props;

	const icons = {
		error: ErrorFilled20,
		"info-square": InformationSquareFilled20,
		info: InformationFilled20,
		success: CheckmarkFilled20,
		warning: WarningFilled20,
		"warning-alt": WarningAltFilled20
	};

	$$self.$$set = $$props => {
		if ("kind" in $$props) $$invalidate(0, kind = $$props.kind);
		if ("notificationType" in $$props) $$invalidate(1, notificationType = $$props.notificationType);
		if ("iconDescription" in $$props) $$invalidate(2, iconDescription = $$props.iconDescription);
	};

	return [kind, notificationType, iconDescription, icons];
}

class NotificationIcon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$s, create_fragment$s, safe_not_equal, {
			kind: 0,
			notificationType: 1,
			iconDescription: 2
		});
	}
}

/* node_modules/carbon-components-svelte/src/Notification/NotificationTextDetails.svelte generated by Svelte v3.31.2 */

function create_if_block_1$3(ctx) {
	let div2;
	let h3;
	let t0;
	let t1;
	let div0;
	let t2;
	let t3;
	let div1;
	let t4;
	let t5;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			div2 = element("div");
			h3 = element("h3");
			t0 = text(/*title*/ ctx[1]);
			t1 = space();
			div0 = element("div");
			t2 = text(/*subtitle*/ ctx[2]);
			t3 = space();
			div1 = element("div");
			t4 = text(/*caption*/ ctx[3]);
			t5 = space();
			if (default_slot) default_slot.c();
			toggle_class(h3, "bx--toast-notification__title", true);
			toggle_class(div0, "bx--toast-notification__subtitle", true);
			toggle_class(div1, "bx--toast-notification__caption", true);
			toggle_class(div2, "bx--toast-notification__details", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, h3);
			append(h3, t0);
			append(div2, t1);
			append(div2, div0);
			append(div0, t2);
			append(div2, t3);
			append(div2, div1);
			append(div1, t4);
			append(div2, t5);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*title*/ 2) set_data(t0, /*title*/ ctx[1]);
			if (!current || dirty & /*subtitle*/ 4) set_data(t2, /*subtitle*/ ctx[2]);
			if (!current || dirty & /*caption*/ 8) set_data(t4, /*caption*/ ctx[3]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (27:0) {#if notificationType === 'inline'}
function create_if_block$i(ctx) {
	let div1;
	let p;
	let t0;
	let t1;
	let div0;
	let t2;
	let t3;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			div1 = element("div");
			p = element("p");
			t0 = text(/*title*/ ctx[1]);
			t1 = space();
			div0 = element("div");
			t2 = text(/*subtitle*/ ctx[2]);
			t3 = space();
			if (default_slot) default_slot.c();
			toggle_class(p, "bx--inline-notification__title", true);
			toggle_class(div0, "bx--inline-notification__subtitle", true);
			toggle_class(div1, "bx--inline-notification__text-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, p);
			append(p, t0);
			append(div1, t1);
			append(div1, div0);
			append(div0, t2);
			append(div1, t3);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*title*/ 2) set_data(t0, /*title*/ ctx[1]);
			if (!current || dirty & /*subtitle*/ 4) set_data(t2, /*subtitle*/ ctx[2]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$t(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = /*notificationType*/ ctx[0] === "toast" && create_if_block_1$3(ctx);
	let if_block1 = /*notificationType*/ ctx[0] === "inline" && create_if_block$i(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*notificationType*/ ctx[0] === "toast") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*notificationType*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*notificationType*/ ctx[0] === "inline") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*notificationType*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$i(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

function instance$t($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { notificationType = "toast" } = $$props;
	let { title = "Title" } = $$props;
	let { subtitle = "" } = $$props;
	let { caption = "Caption" } = $$props;

	$$self.$$set = $$props => {
		if ("notificationType" in $$props) $$invalidate(0, notificationType = $$props.notificationType);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("subtitle" in $$props) $$invalidate(2, subtitle = $$props.subtitle);
		if ("caption" in $$props) $$invalidate(3, caption = $$props.caption);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [notificationType, title, subtitle, caption, $$scope, slots];
}

class NotificationTextDetails extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$t, create_fragment$t, safe_not_equal, {
			notificationType: 0,
			title: 1,
			subtitle: 2,
			caption: 3
		});
	}
}

/* node_modules/carbon-components-svelte/src/Notification/ToastNotification.svelte generated by Svelte v3.31.2 */

function create_if_block$j(ctx) {
	let div;
	let notificationicon;
	let t0;
	let notificationtextdetails;
	let t1;
	let div_class_value;
	let current;
	let mounted;
	let dispose;

	notificationicon = new NotificationIcon({
			props: {
				notificationType: /*notificationType*/ ctx[0],
				kind: /*kind*/ ctx[1],
				iconDescription: /*iconDescription*/ ctx[7]
			}
		});

	notificationtextdetails = new NotificationTextDetails({
			props: {
				title: /*title*/ ctx[4],
				subtitle: /*subtitle*/ ctx[5],
				caption: /*caption*/ ctx[6],
				notificationType: /*notificationType*/ ctx[0],
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			}
		});

	let if_block = !/*hideCloseButton*/ ctx[8] && create_if_block_1$4(ctx);

	let div_levels = [
		{ role: /*role*/ ctx[3] },
		{ kind: /*kind*/ ctx[1] },
		{
			class: div_class_value = /*kind*/ ctx[1] && `bx--toast-notification--${/*kind*/ ctx[1]}`
		},
		/*$$restProps*/ ctx[11]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			create_component(notificationicon.$$.fragment);
			t0 = space();
			create_component(notificationtextdetails.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--toast-notification", true);
			toggle_class(div, "bx--toast-notification--low-contrast", /*lowContrast*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(notificationicon, div, null);
			append(div, t0);
			mount_component(notificationtextdetails, div, null);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[14]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[15]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[16]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const notificationicon_changes = {};
			if (dirty & /*notificationType*/ 1) notificationicon_changes.notificationType = /*notificationType*/ ctx[0];
			if (dirty & /*kind*/ 2) notificationicon_changes.kind = /*kind*/ ctx[1];
			if (dirty & /*iconDescription*/ 128) notificationicon_changes.iconDescription = /*iconDescription*/ ctx[7];
			notificationicon.$set(notificationicon_changes);
			const notificationtextdetails_changes = {};
			if (dirty & /*title*/ 16) notificationtextdetails_changes.title = /*title*/ ctx[4];
			if (dirty & /*subtitle*/ 32) notificationtextdetails_changes.subtitle = /*subtitle*/ ctx[5];
			if (dirty & /*caption*/ 64) notificationtextdetails_changes.caption = /*caption*/ ctx[6];
			if (dirty & /*notificationType*/ 1) notificationtextdetails_changes.notificationType = /*notificationType*/ ctx[0];

			if (dirty & /*$$scope*/ 262144) {
				notificationtextdetails_changes.$$scope = { dirty, ctx };
			}

			notificationtextdetails.$set(notificationtextdetails_changes);

			if (!/*hideCloseButton*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*hideCloseButton*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*role*/ 8) && { role: /*role*/ ctx[3] },
				(!current || dirty & /*kind*/ 2) && { kind: /*kind*/ ctx[1] },
				(!current || dirty & /*kind*/ 2 && div_class_value !== (div_class_value = /*kind*/ ctx[1] && `bx--toast-notification--${/*kind*/ ctx[1]}`)) && { class: div_class_value },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
			]));

			toggle_class(div, "bx--toast-notification", true);
			toggle_class(div, "bx--toast-notification--low-contrast", /*lowContrast*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(notificationicon.$$.fragment, local);
			transition_in(notificationtextdetails.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(notificationicon.$$.fragment, local);
			transition_out(notificationtextdetails.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(notificationicon);
			destroy_component(notificationtextdetails);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (82:4) <NotificationTextDetails       title="{title}"       subtitle="{subtitle}"       caption="{caption}"       notificationType="{notificationType}"     >
function create_default_slot$2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 262144) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[18], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (90:4) {#if !hideCloseButton}
function create_if_block_1$4(ctx) {
	let notificationbutton;
	let current;

	notificationbutton = new NotificationButton({
			props: {
				iconDescription: /*iconDescription*/ ctx[7],
				notificationType: /*notificationType*/ ctx[0]
			}
		});

	notificationbutton.$on("click", /*close*/ ctx[10]);

	return {
		c() {
			create_component(notificationbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(notificationbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const notificationbutton_changes = {};
			if (dirty & /*iconDescription*/ 128) notificationbutton_changes.iconDescription = /*iconDescription*/ ctx[7];
			if (dirty & /*notificationType*/ 1) notificationbutton_changes.notificationType = /*notificationType*/ ctx[0];
			notificationbutton.$set(notificationbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(notificationbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(notificationbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(notificationbutton, detaching);
		}
	};
}

function create_fragment$u(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*open*/ ctx[9] && create_if_block$j(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[9]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 512) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$j(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$u($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"notificationType","kind","lowContrast","timeout","role","title","subtitle","caption","iconDescription","hideCloseButton"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { notificationType = "toast" } = $$props;
	let { kind = "error" } = $$props;
	let { lowContrast = false } = $$props;
	let { timeout = 0 } = $$props;
	let { role = "alert" } = $$props;
	let { title = "Title" } = $$props;
	let { subtitle = "" } = $$props;
	let { caption = "Caption" } = $$props;
	let { iconDescription = "Closes notification" } = $$props;
	let { hideCloseButton = false } = $$props;
	const dispatch = createEventDispatcher();
	let open = true;
	let timeoutId = undefined;

	function close() {
		$$invalidate(9, open = false);
		dispatch("close");
	}

	onMount(() => {
		if (timeout) {
			timeoutId = setTimeout(() => close(), timeout);
		}

		return () => {
			clearTimeout(timeoutId);
		};
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("notificationType" in $$new_props) $$invalidate(0, notificationType = $$new_props.notificationType);
		if ("kind" in $$new_props) $$invalidate(1, kind = $$new_props.kind);
		if ("lowContrast" in $$new_props) $$invalidate(2, lowContrast = $$new_props.lowContrast);
		if ("timeout" in $$new_props) $$invalidate(12, timeout = $$new_props.timeout);
		if ("role" in $$new_props) $$invalidate(3, role = $$new_props.role);
		if ("title" in $$new_props) $$invalidate(4, title = $$new_props.title);
		if ("subtitle" in $$new_props) $$invalidate(5, subtitle = $$new_props.subtitle);
		if ("caption" in $$new_props) $$invalidate(6, caption = $$new_props.caption);
		if ("iconDescription" in $$new_props) $$invalidate(7, iconDescription = $$new_props.iconDescription);
		if ("hideCloseButton" in $$new_props) $$invalidate(8, hideCloseButton = $$new_props.hideCloseButton);
		if ("$$scope" in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	return [
		notificationType,
		kind,
		lowContrast,
		role,
		title,
		subtitle,
		caption,
		iconDescription,
		hideCloseButton,
		open,
		close,
		$$restProps,
		timeout,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class ToastNotification extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$u, create_fragment$u, safe_not_equal, {
			notificationType: 0,
			kind: 1,
			lowContrast: 2,
			timeout: 12,
			role: 3,
			title: 4,
			subtitle: 5,
			caption: 6,
			iconDescription: 7,
			hideCloseButton: 8
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/WarningAltFilled16/WarningAltFilled16.svelte generated by Svelte v3.31.2 */

function create_if_block$k(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$d(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$k(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$k(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$v(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$d(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningAltFilled16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M14.875,11h2.25V21h-2.25ZM16,27a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,27Z");
			attr(path1, "d", "M29.8872,28.5386l-13-25a1,1,0,0,0-1.7744,0l-13,25A1,1,0,0,0,3,30H29a1,1,0,0,0,.8872-1.4614ZM14.875,11h2.25V21h-2.25ZM16,27a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,27Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningAltFilled16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$v($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningAltFilled16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$v, create_fragment$v, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-components-svelte/src/TextInput/TextInput.svelte generated by Svelte v3.31.2 */

function create_if_block_9$1(ctx) {
	let div;
	let t;
	let if_block0 = /*labelText*/ ctx[10] && create_if_block_11(ctx);
	let if_block1 = !/*isFluid*/ ctx[18] && /*helperText*/ ctx[7] && create_if_block_10(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr(div, "class", "bx--text-input__label-helper-wrapper");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t);
			if (if_block1) if_block1.m(div, null);
		},
		p(ctx, dirty) {
			if (/*labelText*/ ctx[10]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_11(ctx);
					if_block0.c();
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*isFluid*/ ctx[18] && /*helperText*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_10(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (88:6) {#if labelText}
function create_if_block_11(ctx) {
	let label;
	let t;
	let label_class_value;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[10]);
			attr(label, "for", /*id*/ ctx[8]);
			attr(label, "class", label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 1024) set_data(t, /*labelText*/ ctx[10]);

			if (dirty[0] & /*id*/ 256) {
				attr(label, "for", /*id*/ ctx[8]);
			}

			if (dirty[0] & /*inline, size*/ 131076 && label_class_value !== (label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`)) {
				attr(label, "class", label_class_value);
			}

			if (dirty[0] & /*inline, size*/ 131076) {
				toggle_class(label, "bx--label", true);
			}

			if (dirty[0] & /*inline, size, hideLabel*/ 133124) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			}

			if (dirty[0] & /*inline, size, disabled*/ 131140) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline, size, inline*/ 131076) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (100:6) {#if !isFluid && helperText}
function create_if_block_10(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[7]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 128) set_data(t, /*helperText*/ ctx[7]);

			if (dirty[0] & /*disabled*/ 64) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (111:2) {#if !inline && labelText}
function create_if_block_8$1(ctx) {
	let label;
	let t;
	let label_class_value;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[10]);
			attr(label, "for", /*id*/ ctx[8]);
			attr(label, "class", label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 1024) set_data(t, /*labelText*/ ctx[10]);

			if (dirty[0] & /*id*/ 256) {
				attr(label, "for", /*id*/ ctx[8]);
			}

			if (dirty[0] & /*inline, size*/ 131076 && label_class_value !== (label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`)) {
				attr(label, "class", label_class_value);
			}

			if (dirty[0] & /*inline, size*/ 131076) {
				toggle_class(label, "bx--label", true);
			}

			if (dirty[0] & /*inline, size, hideLabel*/ 133124) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			}

			if (dirty[0] & /*inline, size, disabled*/ 131140) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline, size, inline*/ 131076) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (132:6) {#if invalid}
function create_if_block_7$1(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--text-input__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (135:6) {#if !invalid && warn}
function create_if_block_6$1(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--text-input__invalid-icon\n            bx--text-input__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (168:6) {#if isFluid}
function create_if_block_5$1(ctx) {
	let hr;

	return {
		c() {
			hr = element("hr");
			toggle_class(hr, "bx--text-input__divider", true);
		},
		m(target, anchor) {
			insert(target, hr, anchor);
		},
		d(detaching) {
			if (detaching) detach(hr);
		}
	};
}

// (171:6) {#if isFluid && !inline && invalid}
function create_if_block_4$3(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[13]);
			attr(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 8192) set_data(t, /*invalidText*/ ctx[13]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (176:6) {#if isFluid && !inline && warn}
function create_if_block_3$3(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[15]);
			attr(div, "id", /*warnId*/ ctx[20]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 32768) set_data(t, /*warnText*/ ctx[15]);

			if (dirty[0] & /*warnId*/ 1048576) {
				attr(div, "id", /*warnId*/ ctx[20]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (180:4) {#if !invalid && !warn && !isFluid && !inline && helperText}
function create_if_block_2$3(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[7]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 128) set_data(t, /*helperText*/ ctx[7]);

			if (dirty[0] & /*disabled*/ 64) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (189:4) {#if !isFluid && invalid}
function create_if_block_1$5(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[13]);
			attr(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 8192) set_data(t, /*invalidText*/ ctx[13]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (194:4) {#if !isFluid && !invalid && warn}
function create_if_block$l(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[15]);
			attr(div, "id", /*warnId*/ ctx[20]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 32768) set_data(t, /*warnText*/ ctx[15]);

			if (dirty[0] & /*warnId*/ 1048576) {
				attr(div, "id", /*warnId*/ ctx[20]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$w(ctx) {
	let div2;
	let t0;
	let t1;
	let div1;
	let div0;
	let t2;
	let t3;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_data_warn_value;
	let input_aria_describedby_value;
	let input_class_value;
	let t4;
	let t5;
	let t6;
	let div0_data_invalid_value;
	let div0_data_warn_value;
	let t7;
	let t8;
	let t9;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*inline*/ ctx[17] && create_if_block_9$1(ctx);
	let if_block1 = !/*inline*/ ctx[17] && /*labelText*/ ctx[10] && create_if_block_8$1(ctx);
	let if_block2 = /*invalid*/ ctx[12] && create_if_block_7$1();
	let if_block3 = !/*invalid*/ ctx[12] && /*warn*/ ctx[14] && create_if_block_6$1();
	let if_block4 = /*isFluid*/ ctx[18] && create_if_block_5$1();
	let if_block5 = /*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*invalid*/ ctx[12] && create_if_block_4$3(ctx);
	let if_block6 = /*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*warn*/ ctx[14] && create_if_block_3$3(ctx);
	let if_block7 = !/*invalid*/ ctx[12] && !/*warn*/ ctx[14] && !/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*helperText*/ ctx[7] && create_if_block_2$3(ctx);
	let if_block8 = !/*isFluid*/ ctx[18] && /*invalid*/ ctx[12] && create_if_block_1$5(ctx);
	let if_block9 = !/*isFluid*/ ctx[18] && !/*invalid*/ ctx[12] && /*warn*/ ctx[14] && create_if_block$l(ctx);
	let div2_levels = [/*$$restProps*/ ctx[21]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			input = element("input");
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			if (if_block5) if_block5.c();
			t6 = space();
			if (if_block6) if_block6.c();
			t7 = space();
			if (if_block7) if_block7.c();
			t8 = space();
			if (if_block8) if_block8.c();
			t9 = space();
			if (if_block9) if_block9.c();
			attr(input, "data-invalid", input_data_invalid_value = /*invalid*/ ctx[12] || undefined);
			attr(input, "aria-invalid", input_aria_invalid_value = /*invalid*/ ctx[12] || undefined);
			attr(input, "data-warn", input_data_warn_value = /*warn*/ ctx[14] || undefined);

			attr(input, "aria-describedby", input_aria_describedby_value = /*invalid*/ ctx[12]
			? /*errorId*/ ctx[19]
			: /*warn*/ ctx[14] ? /*warnId*/ ctx[20] : undefined);

			input.disabled = /*disabled*/ ctx[6];
			attr(input, "id", /*id*/ ctx[8]);
			attr(input, "name", /*name*/ ctx[9]);
			attr(input, "placeholder", /*placeholder*/ ctx[4]);
			attr(input, "type", /*type*/ ctx[3]);
			input.value = /*value*/ ctx[0];
			input.required = /*required*/ ctx[16];
			attr(input, "class", input_class_value = /*size*/ ctx[2] && `bx--text-input--${/*size*/ ctx[2]}`);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[5]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[12]);
			toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[14]);
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[12] || undefined);
			attr(div0, "data-warn", div0_data_warn_value = /*warn*/ ctx[14] || undefined);
			toggle_class(div0, "bx--text-input__field-wrapper", true);
			toggle_class(div1, "bx--text-input__field-outer-wrapper", true);
			toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[17]);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--form-item", true);
			toggle_class(div2, "bx--text-input-wrapper", true);
			toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t0);
			if (if_block1) if_block1.m(div2, null);
			append(div2, t1);
			append(div2, div1);
			append(div1, div0);
			if (if_block2) if_block2.m(div0, null);
			append(div0, t2);
			if (if_block3) if_block3.m(div0, null);
			append(div0, t3);
			append(div0, input);
			/*input_binding*/ ctx[31](input);
			append(div0, t4);
			if (if_block4) if_block4.m(div0, null);
			append(div0, t5);
			if (if_block5) if_block5.m(div0, null);
			append(div0, t6);
			if (if_block6) if_block6.m(div0, null);
			append(div1, t7);
			if (if_block7) if_block7.m(div1, null);
			append(div1, t8);
			if (if_block8) if_block8.m(div1, null);
			append(div1, t9);
			if (if_block9) if_block9.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[26]),
					listen(input, "input", /*input_handler*/ ctx[27]),
					listen(input, "input", /*input_handler_1*/ ctx[32]),
					listen(input, "keydown", /*keydown_handler*/ ctx[28]),
					listen(input, "focus", /*focus_handler*/ ctx[29]),
					listen(input, "blur", /*blur_handler*/ ctx[30]),
					listen(div2, "click", /*click_handler*/ ctx[22]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[23]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[24]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[25])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*inline*/ ctx[17]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_9$1(ctx);
					if_block0.c();
					if_block0.m(div2, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*inline*/ ctx[17] && /*labelText*/ ctx[10]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_8$1(ctx);
					if_block1.c();
					if_block1.m(div2, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*invalid*/ ctx[12]) {
				if (if_block2) {
					if (dirty[0] & /*invalid*/ 4096) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_7$1();
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[12] && /*warn*/ ctx[14]) {
				if (if_block3) {
					if (dirty[0] & /*invalid, warn*/ 20480) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_6$1();
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*invalid*/ 4096 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[12] || undefined)) {
				attr(input, "data-invalid", input_data_invalid_value);
			}

			if (!current || dirty[0] & /*invalid*/ 4096 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[12] || undefined)) {
				attr(input, "aria-invalid", input_aria_invalid_value);
			}

			if (!current || dirty[0] & /*warn*/ 16384 && input_data_warn_value !== (input_data_warn_value = /*warn*/ ctx[14] || undefined)) {
				attr(input, "data-warn", input_data_warn_value);
			}

			if (!current || dirty[0] & /*invalid, errorId, warn, warnId*/ 1593344 && input_aria_describedby_value !== (input_aria_describedby_value = /*invalid*/ ctx[12]
			? /*errorId*/ ctx[19]
			: /*warn*/ ctx[14] ? /*warnId*/ ctx[20] : undefined)) {
				attr(input, "aria-describedby", input_aria_describedby_value);
			}

			if (!current || dirty[0] & /*disabled*/ 64) {
				input.disabled = /*disabled*/ ctx[6];
			}

			if (!current || dirty[0] & /*id*/ 256) {
				attr(input, "id", /*id*/ ctx[8]);
			}

			if (!current || dirty[0] & /*name*/ 512) {
				attr(input, "name", /*name*/ ctx[9]);
			}

			if (!current || dirty[0] & /*placeholder*/ 16) {
				attr(input, "placeholder", /*placeholder*/ ctx[4]);
			}

			if (!current || dirty[0] & /*type*/ 8) {
				attr(input, "type", /*type*/ ctx[3]);
			}

			if (!current || dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				input.value = /*value*/ ctx[0];
			}

			if (!current || dirty[0] & /*required*/ 65536) {
				input.required = /*required*/ ctx[16];
			}

			if (!current || dirty[0] & /*size*/ 4 && input_class_value !== (input_class_value = /*size*/ ctx[2] && `bx--text-input--${/*size*/ ctx[2]}`)) {
				attr(input, "class", input_class_value);
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(input, "bx--text-input", true);
			}

			if (dirty[0] & /*size, light*/ 36) {
				toggle_class(input, "bx--text-input--light", /*light*/ ctx[5]);
			}

			if (dirty[0] & /*size, invalid*/ 4100) {
				toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[12]);
			}

			if (dirty[0] & /*size, warn*/ 16388) {
				toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[14]);
			}

			if (/*isFluid*/ ctx[18]) {
				if (if_block4) ; else {
					if_block4 = create_if_block_5$1();
					if_block4.c();
					if_block4.m(div0, t5);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*invalid*/ ctx[12]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_4$3(ctx);
					if_block5.c();
					if_block5.m(div0, t6);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*warn*/ ctx[14]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_3$3(ctx);
					if_block6.c();
					if_block6.m(div0, null);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (!current || dirty[0] & /*invalid*/ 4096 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[12] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!current || dirty[0] & /*warn*/ 16384 && div0_data_warn_value !== (div0_data_warn_value = /*warn*/ ctx[14] || undefined)) {
				attr(div0, "data-warn", div0_data_warn_value);
			}

			if (!/*invalid*/ ctx[12] && !/*warn*/ ctx[14] && !/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*helperText*/ ctx[7]) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_2$3(ctx);
					if_block7.c();
					if_block7.m(div1, t8);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (!/*isFluid*/ ctx[18] && /*invalid*/ ctx[12]) {
				if (if_block8) {
					if_block8.p(ctx, dirty);
				} else {
					if_block8 = create_if_block_1$5(ctx);
					if_block8.c();
					if_block8.m(div1, t9);
				}
			} else if (if_block8) {
				if_block8.d(1);
				if_block8 = null;
			}

			if (!/*isFluid*/ ctx[18] && !/*invalid*/ ctx[12] && /*warn*/ ctx[14]) {
				if (if_block9) {
					if_block9.p(ctx, dirty);
				} else {
					if_block9 = create_if_block$l(ctx);
					if_block9.c();
					if_block9.m(div1, null);
				}
			} else if (if_block9) {
				if_block9.d(1);
				if_block9 = null;
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[17]);
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty[0] & /*$$restProps*/ 2097152 && /*$$restProps*/ ctx[21]]));
			toggle_class(div2, "bx--form-item", true);
			toggle_class(div2, "bx--text-input-wrapper", true);
			toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[17]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			/*input_binding*/ ctx[31](null);
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			if (if_block8) if_block8.d();
			if (if_block9) if_block9.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$w($$self, $$props, $$invalidate) {
	let isFluid;
	let errorId;
	let warnId;

	const omit_props_names = [
		"size","value","type","placeholder","light","disabled","helperText","id","name","labelText","hideLabel","invalid","invalidText","warn","warnText","ref","required","inline"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { type = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { helperText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { ref = null } = $$props;
	let { required = false } = $$props;
	let { inline = false } = $$props;
	const ctx = getContext("Form");

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(0, value = target.value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(21, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("type" in $$new_props) $$invalidate(3, type = $$new_props.type);
		if ("placeholder" in $$new_props) $$invalidate(4, placeholder = $$new_props.placeholder);
		if ("light" in $$new_props) $$invalidate(5, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("helperText" in $$new_props) $$invalidate(7, helperText = $$new_props.helperText);
		if ("id" in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(9, name = $$new_props.name);
		if ("labelText" in $$new_props) $$invalidate(10, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(11, hideLabel = $$new_props.hideLabel);
		if ("invalid" in $$new_props) $$invalidate(12, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(13, invalidText = $$new_props.invalidText);
		if ("warn" in $$new_props) $$invalidate(14, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(15, warnText = $$new_props.warnText);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("required" in $$new_props) $$invalidate(16, required = $$new_props.required);
		if ("inline" in $$new_props) $$invalidate(17, inline = $$new_props.inline);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 256) {
			 $$invalidate(19, errorId = `error-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 256) {
			 $$invalidate(20, warnId = `warn-${id}`);
		}
	};

	 $$invalidate(18, isFluid = !!ctx && ctx.isFluid);

	return [
		value,
		ref,
		size,
		type,
		placeholder,
		light,
		disabled,
		helperText,
		id,
		name,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		warn,
		warnText,
		required,
		inline,
		isFluid,
		errorId,
		warnId,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		keydown_handler,
		focus_handler,
		blur_handler,
		input_binding,
		input_handler_1
	];
}

class TextInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$w,
			create_fragment$w,
			safe_not_equal,
			{
				size: 2,
				value: 0,
				type: 3,
				placeholder: 4,
				light: 5,
				disabled: 6,
				helperText: 7,
				id: 8,
				name: 9,
				labelText: 10,
				hideLabel: 11,
				invalid: 12,
				invalidText: 13,
				warn: 14,
				warnText: 15,
				ref: 1,
				required: 16,
				inline: 17
			},
			[-1, -1]
		);
	}
}

export { Button, DataTable, Form, Modal, TextInput, ToastNotification, Toolbar, ToolbarContent };

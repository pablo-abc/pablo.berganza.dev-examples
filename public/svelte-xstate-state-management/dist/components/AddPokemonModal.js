import './AddPokemonModal.css.proxy.js';
/* src/components/AddPokemonModal.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	add_flush_callback,
	attr,
	bind,
	binding_callbacks,
	bubble,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	subscribe,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { getContext } from "../../web_modules/svelte.js";
import { createEventDispatcher } from "../../web_modules/svelte.js";

import {
	Modal,
	Form,
	TextInput,
	ToastNotification
} from "../../web_modules/carbon-components-svelte.js";

function create_default_slot_1(ctx) {
	let textinput;
	let updating_value;
	let current;

	function textinput_value_binding(value) {
		/*textinput_value_binding*/ ctx[7].call(null, value);
	}

	let textinput_props = {
		labelText: "Pokemon",
		placeholder: "charizard"
	};

	if (/*pokemon*/ ctx[1] !== void 0) {
		textinput_props.value = /*pokemon*/ ctx[1];
	}

	textinput = new TextInput({ props: textinput_props });
	binding_callbacks.push(() => bind(textinput, "value", textinput_value_binding));

	return {
		c() {
			create_component(textinput.$$.fragment);
		},
		m(target, anchor) {
			mount_component(textinput, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textinput_changes = {};

			if (!updating_value && dirty & /*pokemon*/ 2) {
				updating_value = true;
				textinput_changes.value = /*pokemon*/ ctx[1];
				add_flush_callback(() => updating_value = false);
			}

			textinput.$set(textinput_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textinput, detaching);
		}
	};
}

// (28:0) <Modal   bind:open   hasForm   modalHeading="Add a Pokemon"   primaryButtonText=Add   secondaryButtonText=Cancel   primaryButtonDisabled={!pokemon}   on:click:button--secondary="{() => open = false}"   on:close   on:close="{() => pokemon = ''}"   on:submit={onSubmit}   on:open   >
function create_default_slot(ctx) {
	let form;
	let current;

	form = new Form({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(form.$$.fragment);
		},
		m(target, anchor) {
			mount_component(form, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const form_changes = {};

			if (dirty & /*$$scope, pokemon*/ 16386) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
		},
		i(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(form, detaching);
		}
	};
}

// (46:0) {#if $searchService?.matches('error')}
function create_if_block(ctx) {
	let div;
	let toastnotification;
	let current;

	toastnotification = new ToastNotification({
			props: {
				title: "Error",
				caption: "There was an error while fetching the pokemon"
			}
		});

	return {
		c() {
			div = element("div");
			create_component(toastnotification.$$.fragment);
			attr(div, "class", "error svelte-1yvl6fh");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(toastnotification, div, null);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(toastnotification.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(toastnotification.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(toastnotification);
		}
	};
}

function create_fragment(ctx) {
	let modal;
	let updating_open;
	let t;
	let show_if = /*$searchService*/ ctx[3]?.matches("error");
	let if_block_anchor;
	let current;

	function modal_open_binding(value) {
		/*modal_open_binding*/ ctx[8].call(null, value);
	}

	let modal_props = {
		hasForm: true,
		modalHeading: "Add a Pokemon",
		primaryButtonText: "Add",
		secondaryButtonText: "Cancel",
		primaryButtonDisabled: !/*pokemon*/ ctx[1],
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*open*/ ctx[0] !== void 0) {
		modal_props.open = /*open*/ ctx[0];
	}

	modal = new Modal({ props: modal_props });
	binding_callbacks.push(() => bind(modal, "open", modal_open_binding));
	modal.$on("click:button--secondary", /*click_button_secondary_handler*/ ctx[9]);
	modal.$on("close", /*close_handler*/ ctx[10]);
	modal.$on("close", /*close_handler_1*/ ctx[11]);
	modal.$on("submit", /*onSubmit*/ ctx[5]);
	modal.$on("open", /*open_handler*/ ctx[12]);
	let if_block = show_if && create_if_block(ctx);

	return {
		c() {
			create_component(modal.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(modal, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const modal_changes = {};
			if (dirty & /*pokemon*/ 2) modal_changes.primaryButtonDisabled = !/*pokemon*/ ctx[1];

			if (dirty & /*$$scope, pokemon*/ 16386) {
				modal_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty & /*open*/ 1) {
				updating_open = true;
				modal_changes.open = /*open*/ ctx[0];
				add_flush_callback(() => updating_open = false);
			}

			modal.$set(modal_changes);
			if (dirty & /*$searchService*/ 8) show_if = /*$searchService*/ ctx[3]?.matches("error");

			if (show_if) {
				if (if_block) {
					if (dirty & /*$searchService*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			destroy_component(modal, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let searchService;
	let $pokemonService;

	let $searchService,
		$$unsubscribe_searchService = noop,
		$$subscribe_searchService = () => ($$unsubscribe_searchService(), $$unsubscribe_searchService = subscribe(searchService, $$value => $$invalidate(3, $searchService = $$value)), searchService);

	$$self.$$.on_destroy.push(() => $$unsubscribe_searchService());
	const pokemonService = getContext("pokemonService");
	component_subscribe($$self, pokemonService, value => $$invalidate(6, $pokemonService = value));
	let { open = false } = $$props;
	let pokemon = "";
	const dispatch = createEventDispatcher();

	function onSubmit() {
		if (!pokemon) return;
		dispatch("submit", pokemon);
		$$invalidate(0, open = false);
		$$invalidate(1, pokemon = "");
	}

	function textinput_value_binding(value) {
		pokemon = value;
		$$invalidate(1, pokemon);
	}

	function modal_open_binding(value) {
		open = value;
		$$invalidate(0, open);
	}

	const click_button_secondary_handler = () => $$invalidate(0, open = false);

	function close_handler(event) {
		bubble($$self, event);
	}

	const close_handler_1 = () => $$invalidate(1, pokemon = "");

	function open_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("open" in $$props) $$invalidate(0, open = $$props.open);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$pokemonService*/ 64) {
			$: $$subscribe_searchService($$invalidate(2, searchService = $pokemonService.children.search));
		}
	};

	return [
		open,
		pokemon,
		searchService,
		$searchService,
		pokemonService,
		onSubmit,
		$pokemonService,
		textinput_value_binding,
		modal_open_binding,
		click_button_secondary_handler,
		close_handler,
		close_handler_1,
		open_handler
	];
}

class AddPokemonModal extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { open: 0 });
	}
}

export default AddPokemonModal;
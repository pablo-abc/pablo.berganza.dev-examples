/* src/pages/Home.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	add_flush_callback,
	bind,
	binding_callbacks,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { getContext } from "../../web_modules/svelte.js";

import {
	Button,
	DataTable,
	Toolbar,
	ToolbarContent
} from "../../web_modules/carbon-components-svelte.js";

import AddPokemonModal from "../components/AddPokemonModal.js";
import RemovePokemonModal from "../components/RemovePokemonModal.js";

function create_default_slot_4(ctx) {
	let t;

	return {
		c() {
			t = text("Add Pokemon");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (47:6) <Button         disabled={!selectedRowIds.length}         kind=danger         on:click="{() => removeModalOpened = true}"         >
function create_default_slot_3(ctx) {
	let t;

	return {
		c() {
			t = text("Remove selected");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (45:4) <ToolbarContent>
function create_default_slot_2(ctx) {
	let button0;
	let t;
	let button1;
	let current;

	button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*click_handler*/ ctx[9]);

	button1 = new Button({
			props: {
				disabled: !/*selectedRowIds*/ ctx[0].length,
				kind: "danger",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*click_handler_1*/ ctx[10]);

	return {
		c() {
			create_component(button0.$$.fragment);
			t = space();
			create_component(button1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button0, target, anchor);
			insert(target, t, anchor);
			mount_component(button1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*$$scope*/ 262144) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty & /*selectedRowIds*/ 1) button1_changes.disabled = !/*selectedRowIds*/ ctx[0].length;

			if (dirty & /*$$scope*/ 262144) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button0, detaching);
			if (detaching) detach(t);
			destroy_component(button1, detaching);
		}
	};
}

// (44:2) <Toolbar>
function create_default_slot_1(ctx) {
	let toolbarcontent;
	let current;

	toolbarcontent = new ToolbarContent({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(toolbarcontent.$$.fragment);
		},
		m(target, anchor) {
			mount_component(toolbarcontent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const toolbarcontent_changes = {};

			if (dirty & /*$$scope, selectedRowIds, removeModalOpened, addModalOpened*/ 262151) {
				toolbarcontent_changes.$$scope = { dirty, ctx };
			}

			toolbarcontent.$set(toolbarcontent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(toolbarcontent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(toolbarcontent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(toolbarcontent, detaching);
		}
	};
}

// (35:0) <DataTable   title="Pokemon"   description="The pokemons you have saved"   selectable   sortable   bind:selectedRowIds   {headers}   {rows}   >
function create_default_slot(ctx) {
	let toolbar;
	let current;

	toolbar = new Toolbar({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(toolbar.$$.fragment);
		},
		m(target, anchor) {
			mount_component(toolbar, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const toolbar_changes = {};

			if (dirty & /*$$scope, selectedRowIds, removeModalOpened, addModalOpened*/ 262151) {
				toolbar_changes.$$scope = { dirty, ctx };
			}

			toolbar.$set(toolbar_changes);
		},
		i(local) {
			if (current) return;
			transition_in(toolbar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(toolbar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(toolbar, detaching);
		}
	};
}

function create_fragment(ctx) {
	let datatable;
	let updating_selectedRowIds;
	let t0;
	let addpokemonmodal;
	let updating_open;
	let t1;
	let removepokemonmodal;
	let updating_open_1;
	let current;

	function datatable_selectedRowIds_binding(value) {
		/*datatable_selectedRowIds_binding*/ ctx[11].call(null, value);
	}

	let datatable_props = {
		title: "Pokemon",
		description: "The pokemons you have saved",
		selectable: true,
		sortable: true,
		headers: /*headers*/ ctx[5],
		rows: /*rows*/ ctx[3],
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*selectedRowIds*/ ctx[0] !== void 0) {
		datatable_props.selectedRowIds = /*selectedRowIds*/ ctx[0];
	}

	datatable = new DataTable({ props: datatable_props });
	binding_callbacks.push(() => bind(datatable, "selectedRowIds", datatable_selectedRowIds_binding));

	function addpokemonmodal_open_binding(value) {
		/*addpokemonmodal_open_binding*/ ctx[12].call(null, value);
	}

	let addpokemonmodal_props = {};

	if (/*addModalOpened*/ ctx[1] !== void 0) {
		addpokemonmodal_props.open = /*addModalOpened*/ ctx[1];
	}

	addpokemonmodal = new AddPokemonModal({ props: addpokemonmodal_props });
	binding_callbacks.push(() => bind(addpokemonmodal, "open", addpokemonmodal_open_binding));
	addpokemonmodal.$on("submit", /*onSubmit*/ ctx[6]);
	addpokemonmodal.$on("close", /*close_handler*/ ctx[13]);
	addpokemonmodal.$on("open", /*open_handler*/ ctx[14]);

	function removepokemonmodal_open_binding(value) {
		/*removepokemonmodal_open_binding*/ ctx[15].call(null, value);
	}

	let removepokemonmodal_props = {};

	if (/*removeModalOpened*/ ctx[2] !== void 0) {
		removepokemonmodal_props.open = /*removeModalOpened*/ ctx[2];
	}

	removepokemonmodal = new RemovePokemonModal({ props: removepokemonmodal_props });
	binding_callbacks.push(() => bind(removepokemonmodal, "open", removepokemonmodal_open_binding));
	removepokemonmodal.$on("submit", /*onDelete*/ ctx[7]);
	removepokemonmodal.$on("close", /*close_handler_1*/ ctx[16]);
	removepokemonmodal.$on("open", /*open_handler_1*/ ctx[17]);

	return {
		c() {
			create_component(datatable.$$.fragment);
			t0 = space();
			create_component(addpokemonmodal.$$.fragment);
			t1 = space();
			create_component(removepokemonmodal.$$.fragment);
		},
		m(target, anchor) {
			mount_component(datatable, target, anchor);
			insert(target, t0, anchor);
			mount_component(addpokemonmodal, target, anchor);
			insert(target, t1, anchor);
			mount_component(removepokemonmodal, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const datatable_changes = {};
			if (dirty & /*rows*/ 8) datatable_changes.rows = /*rows*/ ctx[3];

			if (dirty & /*$$scope, selectedRowIds, removeModalOpened, addModalOpened*/ 262151) {
				datatable_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selectedRowIds && dirty & /*selectedRowIds*/ 1) {
				updating_selectedRowIds = true;
				datatable_changes.selectedRowIds = /*selectedRowIds*/ ctx[0];
				add_flush_callback(() => updating_selectedRowIds = false);
			}

			datatable.$set(datatable_changes);
			const addpokemonmodal_changes = {};

			if (!updating_open && dirty & /*addModalOpened*/ 2) {
				updating_open = true;
				addpokemonmodal_changes.open = /*addModalOpened*/ ctx[1];
				add_flush_callback(() => updating_open = false);
			}

			addpokemonmodal.$set(addpokemonmodal_changes);
			const removepokemonmodal_changes = {};

			if (!updating_open_1 && dirty & /*removeModalOpened*/ 4) {
				updating_open_1 = true;
				removepokemonmodal_changes.open = /*removeModalOpened*/ ctx[2];
				add_flush_callback(() => updating_open_1 = false);
			}

			removepokemonmodal.$set(removepokemonmodal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(datatable.$$.fragment, local);
			transition_in(addpokemonmodal.$$.fragment, local);
			transition_in(removepokemonmodal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datatable.$$.fragment, local);
			transition_out(addpokemonmodal.$$.fragment, local);
			transition_out(removepokemonmodal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(datatable, detaching);
			if (detaching) detach(t0);
			destroy_component(addpokemonmodal, detaching);
			if (detaching) detach(t1);
			destroy_component(removepokemonmodal, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let rows;
	let $pokemonService;
	const pokemonService = getContext("pokemonService");
	component_subscribe($$self, pokemonService, value => $$invalidate(8, $pokemonService = value));

	let headers = [
		{ key: "id", value: "ID" },
		{ key: "name", value: "Name" },
		{
			key: "base_experience",
			value: "Base Experience"
		}
	];

	let selectedRowIds = [];
	let addModalOpened = false;
	let removeModalOpened = false;

	function onSubmit({ detail }) {
		pokemonService.send("CONFIRM", { searchValue: detail.toLowerCase() });
	}

	function onDelete() {
		pokemonService.send("REMOVE_MODAL");
		pokemonService.send("CONFIRM", { ids: selectedRowIds });
		$$invalidate(0, selectedRowIds = []);
	}

	const click_handler = () => $$invalidate(1, addModalOpened = true);
	const click_handler_1 = () => $$invalidate(2, removeModalOpened = true);

	function datatable_selectedRowIds_binding(value) {
		selectedRowIds = value;
		$$invalidate(0, selectedRowIds);
	}

	function addpokemonmodal_open_binding(value) {
		addModalOpened = value;
		$$invalidate(1, addModalOpened);
	}

	const close_handler = () => pokemonService.send("CANCEL");
	const open_handler = () => pokemonService.send("ADD_MODAL");

	function removepokemonmodal_open_binding(value) {
		removeModalOpened = value;
		$$invalidate(2, removeModalOpened);
	}

	const close_handler_1 = () => pokemonService.send("CANCEL");
	const open_handler_1 = () => pokemonService.send("REMOVE_MODAL");

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$pokemonService*/ 256) {
			$: $$invalidate(3, rows = $pokemonService.context.addedPokemon || []);
		}
	};

	return [
		selectedRowIds,
		addModalOpened,
		removeModalOpened,
		rows,
		pokemonService,
		headers,
		onSubmit,
		onDelete,
		$pokemonService,
		click_handler,
		click_handler_1,
		datatable_selectedRowIds_binding,
		addpokemonmodal_open_binding,
		close_handler,
		open_handler,
		removepokemonmodal_open_binding,
		close_handler_1,
		open_handler_1
	];
}

class Home extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Home;